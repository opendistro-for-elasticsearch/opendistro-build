name: Build ES Docker

on: 
  schedule:
    - cron: '30 10 * * *'
  repository_dispatch:
    types: [staging-build-docker]
  push:
    branches: [opendistro-infra-issues-259-1]

jobs:
  Test-SQL-KIBANA-NoSec:
    #needs: [build-es-docker, build-kibana-docker]
    runs-on: [ubuntu-16.04]
    name: Test-SQL-KIBANA-NoSec
    strategy:
      matrix:
        java: [14]
    steps:
      - uses: actions/checkout@v1
      - name: Set up AWS Cred
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
      - name: Retrieve plugin tags 
        run: |
          echo ::set-env name=p_tag_sql_kibana::$(.github/scripts/plugin_tag.sh opendistro-for-elasticsearch/sql)
          echo ::set-env name=es_version::$(./bin/version-info --es)
          
      - name: Checkout Kibana
        uses: actions/checkout@v2
        with:
          repository: opendistro-for-elasticsearch/kibana-oss
          ref: ${{env.es_version}}
          token: ${{ secrets.ODFE_RELEASE_BOT_PUBLIC_PRIVATE_READ_WRITE_TOKEN }}
          path: kibana
           
      - uses: actions/checkout@v2
        with:
          repository: opendistro-for-elasticsearch/sql
          ref: ${{env.p_tag_sql_kibana}}
          path: kibana/plugins/sql
      
      - name: Setup Java
        uses: actions/setup-java@v1
        with:
          java-version: ${{ matrix.java }}
      
      - name: Get node and yarn versions
        id: node_yarn_versions
        run: |
          echo ::set-env name=kibana_node_version::$(node -p "(require('./kibana/package.json').engines.node).match(/[.0-9]+/)[0]")
          echo ::set-env name=kibana_yarn_version::$(node -p "(require('./kibana/package.json').engines.yarn).match(/[.0-9]+/)[0]")   
      
      - name: Setup node
        uses: actions/setup-node@v1
        with:
          node-version: ${{env.kibana_node_version}}
          registry-url: 'https://registry.npmjs.org'
      
      - name: Install correct yarn version for Kibana
        run: |
          npm uninstall -g yarn
          echo "Installing yarn ${{ env.kibana_yarn_version }}"
          npm i -g yarn@${{ env.kibana_yarn_version }}
      
      - name: Bootstrap the plugin
        run: |
          cd ./kibana/plugins
          cp -rp sql/sql-workbench .
          rm -rf sql/
          cd sql-workbench

      - name: Retry the bootstraps
        # sql repo has a bug that you have to bootstrap at least twice to success
        # this is a temp solution and they will try to fix it later
        uses: nick-invision/retry@v1
        with:
          timeout_minutes: 60
          max_attempts: 3
          command: cd ./kibana/plugins/sql-workbench; pwd; yarn kbn bootstrap

      - name: Start ES and Kibana
        run: |
          .github/scripts/setup_runners_service.sh docker --kibana-nosec
          echo "load the indices"
          curl -s https://raw.githubusercontent.com/opendistro-for-elasticsearch/sql/master/integ-test/src/test/resources/accounts.json | curl -s -H 'Content-Type: application/x-ndjson' -XPOST 'localhost:9200/accounts/_bulk?pretty' --data-binary @- > /dev/null 2>&1
          curl -s https://raw.githubusercontent.com/opendistro-for-elasticsearch/sql/master/integ-test/src/test/resources/employee_nested.json | curl -s -H 'Content-Type: application/x-ndjson' -XPOST 'localhost:9200/employee_nested/_bulk?pretty' --data-binary @- > /dev/null 2>&1
 
      - name: run IT
        uses: cypress-io/github-action@v1
        with:
          working-directory: kibana/plugins/sql-workbench
          command: npx cypress run

