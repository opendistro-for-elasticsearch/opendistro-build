name: Process RPM Artifacts

on:
  #schedule:
  #  - cron: '0 10 * * *'
  repository_dispatch:
    types: [staging-build-rpm]

jobs:
  plugin-availability:
    name: Check Plugin Availability
    runs-on: ubuntu-18.04
    steps:
      - uses: actions/checkout@v1
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Run check_plugin scripts
        run: .github/scripts/check_plugin.sh "rpm,kibana"; exit `cat /tmp/plugin_status.check`

  build-es-artifacts:
    needs: [plugin-availability]
    name: Build ES Artifacts
    runs-on: ubuntu-18.04
    container:
      image: opendistroforelasticsearch/multijava08101112-git:v1

    steps:
      - uses: actions/checkout@v1
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
      - name: Build rpm
        run: |
          #!/bin/bash -x
          set -e
          set -u
          export JAVA_HOME=/openjdk12
          export PATH=$JAVA_HOME:$PATH
          cd elasticsearch/linux_distributions
          ./gradlew buildRpm --console=plain -Dbuild.snapshot=false -b ./build.gradle
          rpm_artifact=`ls build/distributions/*.rpm`
          ls -ltr build/distributions/*.rpm

          aws s3 cp $rpm_artifact s3://artifacts.opendistroforelasticsearch.amazon.com/downloads/rpms/opendistro-elasticsearch/
          aws cloudfront create-invalidation --distribution-id E1VG5HMIWI4SA2 --paths "/downloads/*"

          echo "RPM creation for ES completed"

  build-kibana-artifacts:
    needs: [plugin-availability]
    name: Build Kibana Artifacts
    runs-on: [ubuntu-18.04]
    container:
      image: opendistroforelasticsearch/jsenv:v1
    steps:
      - uses: actions/checkout@v1
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
      - name: Build Kibana rpm
        run: apt install -y jq; ./kibana/linux_distributions/opendistro-kibana-build.sh rpm

  signing-artifacts:   
    name: Sign Yum
    runs-on: [ubuntu-16.04]
    container: 
      image: amazonlinux
    needs: [build-es-artifacts, build-kibana-artifacts]
    steps:
      - uses: actions/checkout@v1
        
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
      - name: Sign And Upload Artifacts
        env:
          passphrase: ${{ secrets.RPM_SIGN_PASSPHRASE }}
        run: |
          yum update -y
          yum install -y unzip
          sleep 5
          curl "https://s3.amazonaws.com/aws-cli/awscli-bundle.zip" -o "awscli-bundle.zip"
          unzip awscli-bundle.zip
          ./awscli-bundle/install -b ~/bin/aws
          sleep 5
          chmod 755 elasticsearch/linux_distributions/scripts/rpm-addsign.exp
          sh elasticsearch/linux_distributions/rpm-signing.sh $passphrase

  Build-ES-and-Kibana-Centos-Docker:
    needs: [signing-artifacts]
    runs-on: [ubuntu-18.04]
    name: Build Centos image for Sanity Testing
    steps:
      - uses: actions/checkout@v1
      - name: Checkout Opendistro-Infra
        uses: actions/checkout@v1
        with:
          repository: opendistro-for-elasticsearch/opendistro-infra
          ref: jenkins-test
          token: ${{ secrets.ODFE_RELEASE_BOT_PUBLIC_PRIVATE_READ_WRITE_TOKEN }}
      - name: Build Centos Docker Image
        env:
          DOCKER_USER: ${{ secrets.DOCKER_USER }}
          DOCKER_PASS: ${{ secrets.DOCKER_PASS }}
        run: |
          ES_VER=`./bin/version-info --es`
          ODFE_VER=`./bin/version-info --od`
          cd elasticsearch/linux_distributions
          cd ../../..
          cd opendistro-infra/scripts/dockerfiles/tests/elasticsearch
          docker build --build-arg VER=$ODFE_VER -t opendistroforelasticsearch/elasticsearch-test-centos:$ODFE_VER -f opendistro.elasticsearch.test.centos.Dockerfile .
          
          cd ../kibana
          docker build -t opendistroforelasticsearch/kibana-test-centos:$ODFE_VER -f opendistro.kibana.test.centos.Dockerfile .
          
          echo "******************************"
          echo "Login to Docker"
          echo "******************************"
          docker login --username $DOCKER_USER --password $DOCKER_PASS
          
          docker push opendistroforelasticsearch/elasticsearch-test-centos:$ODFE_VER
          sleep 5
          docker push opendistroforelasticsearch/kibana-test-centos:$ODFE_VER

      - name: Create Email Message
        run: |
          echo "<h2>Docker Images for Centos Are Ready</h2>" >> Message.md
          echo "<h3> ES Image for Centos Testing: opendistroforelasticsearch/elasticsearch-test-centos:Version-Tag </h3>" >> Message.md
          echo "<h3> Kibana Image for Centos Testing: opendistroforelasticsearch/kibana-test-centos:Version-Tag </h3>" >> Message.md

      - name: Send Mail
        uses: dawidd6/action-send-mail@master
        with:
          server_address: smtp.gmail.com
          server_port: 465
          username: ${{secrets.MAIL_USERNAME}}
          password: ${{secrets.MAIL_PASSWORD}}
          subject: Opendistro for Elasticsearch Build - Centos Images For Testing
          # Read file contents as body:
          body: file://Message.md
          to: odfe-distribution-build@amazon.com
          from: Opendistro Elasticsearch
          # Optional content type:
          content_type: text/html

  Provision-Runners:
    needs: [signing-artifacts]
    name: Provision-Runners
    runs-on: ubuntu-18.04
    steps:
      - uses: actions/checkout@v1
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_EC2_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_EC2_SECRET_ACCESS_KEY }}
          aws-region: us-west-2
      - name: AWS Cli Processing
        run: |
          #!/bin/bash
          # Please add comma at the end of the RUNNERS strings
          RUNNERS="odfe-rpm-sql,odfe-rpm-ad,"
          RUNNERS+="odfe-rpm-ism-nosec,odfe-rpm-alerting-nosec,odfe-rpm-sql-nosec,odfe-rpm-knn-nosec,odfe-rpm-ad-nosec,"
          RUNNERS+="odfe-rpm-ad-kibana-nosec"
          .github/scripts/setup_runners.sh run $RUNNERS ${{ secrets.ODFE_RELEASE_BOT_PUBLIC_PRIVATE_READ_WRITE_TOKEN }}

  Test-ISM-NoSec:
    needs: [Provision-Runners]
    name: Test-ISM-NoSec
    runs-on: [self-hosted, Linux, X64, odfe-rpm-ism-nosec]
    steps:
      - uses: actions/checkout@v1
      - name: Setup Java
        uses: actions/setup-java@v1
        with:
          java-version: 14
      - name: Retrieve plugin tags
        run: echo ::set-env name=p_tag_ism::$(.github/scripts/plugin_tag.sh opendistro-for-elasticsearch/index-management)
      - uses: actions/checkout@v1
        with:
          repository: opendistro-for-elasticsearch/index-management
          ref: ${{env.p_tag_ism}}
      - name: IT for ISM NoSec
        run: |
          .github/scripts/setup_runners_service.sh rpm --es-nosec
          export PATH=$JAVA_HOME:$PATH; cd $GITHUB_WORKSPACE/../index-management; pwd
          ./gradlew integTest -Dtests.rest.cluster=localhost:9200 -Dtests.cluster=localhost:9200 -Dtests.clustername=es-integrationtest
  
  Test-ALERTING-NoSec:
    needs: [Provision-Runners]
    name: Test-ALERTING-NoSec
    runs-on: [self-hosted, Linux, X64, odfe-rpm-alerting-nosec]
    steps:
      - uses: actions/checkout@v1
      - name: Setup Java
        uses: actions/setup-java@v1
        with:
          java-version: 14
      - name: Retrieve plugin tags
        run: echo ::set-env name=p_tag_alerting::$(.github/scripts/plugin_tag.sh opendistro-for-elasticsearch/alerting)
      - uses: actions/checkout@v1
        with:
          repository: opendistro-for-elasticsearch/alerting
          ref: ${{env.p_tag_alerting}}
      - name: IT for ALERTING NoSec
        run: |
          .github/scripts/setup_runners_service.sh rpm --es-nosec
          export PATH=$JAVA_HOME:$PATH; cd $GITHUB_WORKSPACE/../alerting/alerting; pwd
          ../gradlew integTest -Dtests.rest.cluster=localhost:9200 -Dtests.cluster=localhost:9200 -Dtests.clustername=es-integrationtest

  Test-SQL-NoSec:
    needs: [Provision-Runners]
    name: Test-SQL-NoSec
    runs-on: [self-hosted, Linux, X64, odfe-rpm-sql-nosec]
    steps:
      - uses: actions/checkout@v1
      - name: Setup Java
        uses: actions/setup-java@v1
        with:
          java-version: 14
      - name: Retrieve plugin tags
        run: echo ::set-env name=p_tag_sql::$(.github/scripts/plugin_tag.sh opendistro-for-elasticsearch/sql)
      - uses: actions/checkout@v1
        with:
          repository: opendistro-for-elasticsearch/sql
          ref: ${{env.p_tag_sql}}
      - name: IT for SQL NoSec
        run: |
          .github/scripts/setup_runners_service.sh rpm --es-nosec
          export PATH=$JAVA_HOME:$PATH; cd $GITHUB_WORKSPACE/../sql; pwd
          ./gradlew integTest -Dtests.rest.cluster=localhost:9200 -Dtests.cluster=localhost:9200 -Dtests.clustername=es-integrationtest

  Test-KNN-NoSec:
    needs: [Provision-Runners]
    name: Test-KNN-NoSec
    runs-on: [self-hosted, Linux, X64, odfe-rpm-knn-nosec]
    steps:
      - uses: actions/checkout@v1
      - name: Setup Java
        uses: actions/setup-java@v1
        with:
          java-version: 14
      - name: Retrieve plugin tags
        run: echo ::set-env name=p_tag_knn::$(.github/scripts/plugin_tag.sh opendistro-for-elasticsearch/k-NN)
      - uses: actions/checkout@v1
        with:
          repository: opendistro-for-elasticsearch/k-NN
          ref: ${{env.p_tag_knn}}
      - name: IT for KNN NoSec
        run: |
          .github/scripts/setup_runners_service.sh rpm --es-nosec
          export PATH=$JAVA_HOME:$PATH; cd $GITHUB_WORKSPACE/../k-NN; pwd
          ./gradlew integTest -Dtests.rest.cluster=localhost:9200 -Dtests.cluster=localhost:9200 -Dtests.clustername=es-integrationtest

  Test-AD-NoSec:
    needs: [Provision-Runners]
    name: Test-AD-NoSec
    runs-on: [self-hosted, Linux, X64, odfe-rpm-ad-nosec]
    steps:
      - uses: actions/checkout@v1
      - name: Setup Java
        uses: actions/setup-java@v1
        with:
          java-version: 14
      - name: Retrieve plugin tags
        run: echo ::set-env name=p_tag_ad::$(.github/scripts/plugin_tag.sh opendistro-for-elasticsearch/anomaly-detection)
      - uses: actions/checkout@v1
        with:
          repository: opendistro-for-elasticsearch/anomaly-detection
          ref: ${{env.p_tag_ad}}
      - name: IT for AD NoSec
        run: |
          .github/scripts/setup_runners_service.sh rpm --es-nosec
          export PATH=$JAVA_HOME:$PATH; cd $GITHUB_WORKSPACE/../anomaly-detection; pwd
          ./gradlew :integTestRunner --tests "com.amazon.opendistroforelasticsearch.ad.rest.*IT" --tests "com.amazon.opendistroforelasticsearch.ad.e2e.*IT" -Dtests.rest.cluster=localhost:9200 -Dtests.cluster=localhost:9200 -Dtests.clustername=es-integrationtest

  Test-SQL:
    needs: [Provision-Runners]
    name: Test-SQL
    runs-on: [self-hosted, Linux, X64, odfe-rpm-sql]
    steps:
      - uses: actions/checkout@v1
      - name: Setup Java
        uses: actions/setup-java@v1
        with:
          java-version: 14
      - name: Retrieve plugin tags
        run: echo ::set-env name=p_tag_sql::$(.github/scripts/plugin_tag.sh opendistro-for-elasticsearch/sql)
      - uses: actions/checkout@v1
        with:
          repository: opendistro-for-elasticsearch/sql
          ref: ${{env.p_tag_sql}}
      - name: IT for SQL
        run: |
          .github/scripts/setup_runners_service.sh rpm --es
          export PATH=$JAVA_HOME:$PATH; cd $GITHUB_WORKSPACE/../sql; pwd
          ./gradlew integTest -Dtests.rest.cluster=localhost:9200 -Dtests.cluster=localhost:9200 -Dtests.clustername=es-integrationtest -Dhttps=true -Duser=admin -Dpassword=admin

  Test-AD:
    needs: [Provision-Runners]
    name: Test-AD
    runs-on: [self-hosted, Linux, X64, odfe-rpm-ad]
    steps:
      - uses: actions/checkout@v1
      - name: Setup Java
        uses: actions/setup-java@v1
        with:
          java-version: 14
      - name: Retrieve plugin tags
        run: echo ::set-env name=p_tag_ad::$(.github/scripts/plugin_tag.sh opendistro-for-elasticsearch/anomaly-detection)
      - uses: actions/checkout@v1
        with:
          repository: opendistro-for-elasticsearch/anomaly-detection
          ref: ${{env.p_tag_ad}}
      - name: IT for AD
        run: |
          .github/scripts/setup_runners_service.sh rpm --es
          export PATH=$JAVA_HOME:$PATH; cd $GITHUB_WORKSPACE/../anomaly-detection; pwd
          ./gradlew :integTestRunner --tests "com.amazon.opendistroforelasticsearch.ad.rest.*IT" --tests "com.amazon.opendistroforelasticsearch.ad.e2e.*IT" -Dtests.rest.cluster=localhost:9200 -Dtests.cluster=localhost:9200 -Dtests.clustername="es-integrationtest" -Dhttps=true -Duser=admin -Dpassword=admin

  Test-AD-KIBANA-NoSec:
    needs: [Provision-Runners]
    runs-on: [self-hosted, Linux, X64, odfe-rpm-ad-kibana-nosec]
    steps:
      - uses: actions/checkout@v1
      - name: Setup Java
        uses: actions/setup-java@v1
        with:
          java-version: 14

      - name: Retrieve plugin tags
        run: |
          echo ::set-env name=es_version_kibana::$(python ./bin/version-info --es)
          echo ::set-env name=p_tag_ad_kibana::$(.github/scripts/plugin_tag.sh opendistro-for-elasticsearch/anomaly-detection-kibana-plugin)

      - name: Checkout Kibana
        uses: actions/checkout@v2
        with:
          repository: opendistro-for-elasticsearch/kibana-oss
          ref: ${{env.es_version_kibana}}
          token: ${{ secrets.ODFE_RELEASE_BOT_PUBLIC_PRIVATE_READ_WRITE_TOKEN }}
          path: kibana

      - name: Get node and yarn versions
        id: node_yarn_versions
        run: |
          curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.34.0/install.sh | bash
          . ~/.nvm/nvm.sh
          nvm install node
          
          echo ::set-env name=kibana_node_version::$(node -p "(require('./kibana/package.json').engines.node).match(/[.0-9]+/)[0]")
          echo ::set-env name=kibana_yarn_version::$(node -p "(require('./kibana/package.json').engines.yarn).match(/[.0-9]+/)[0]")

      - name: Setup node
        uses: actions/setup-node@v1
        with:
          node-version: ${{env.kibana_node_version}}
          registry-url: 'https://registry.npmjs.org'

      - name: Install correct yarn version for Kibana
        run: |
          npm uninstall -g yarn
          echo "Installing yarn ${{ env.kibana_yarn_version }}"
          npm i -g yarn@${{ env.kibana_yarn_version }}

      - name: Checking out ad kibana repo
        uses: actions/checkout@v2
        with:
          repository: opendistro-for-elasticsearch/anomaly-detection-kibana-plugin
          ref: ${{env.p_tag_ad_kibana}}
          path: kibana/plugins/anomaly-detection-kibana-plugin

      - name: Bootstrap the AD kibana plugin
        run: |
          cd ./kibana/plugins/anomaly-detection-kibana-plugin
          yarn kbn bootstrap

      - name: Start ES and Kibana
        run: .github/scripts/setup_runners_service.sh rpm --kibana-nosec

      - name: run IT for AD kibana plugin
        uses: cypress-io/github-action@v1
        with:
          working-directory: kibana/plugins/anomaly-detection-kibana-plugin
          command: yarn cy:run --config baseurl=http://localhost:5601

  CleanUp-Runners:
    needs: [Test-SQL, Test-AD, Test-ISM-NoSec, Test-ALERTING-NoSec, Test-SQL-NoSec, Test-KNN-NoSec, Test-AD-NoSec, Test-AD-KIBANA-NoSec]
    if: always()
    name: CleanUp-Runners
    runs-on: ubuntu-18.04
    steps:
      - uses: actions/checkout@v1
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_EC2_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_EC2_SECRET_ACCESS_KEY }}
          aws-region: us-west-2
      - name: AWS Cli Processing
        run: |
          #!/bin/bash
          # Please add comma at the end of the RUNNERS strings
          RUNNERS="odfe-rpm-sql,odfe-rpm-ad,"
          RUNNERS+="odfe-rpm-ism-nosec,odfe-rpm-alerting-nosec,odfe-rpm-sql-nosec,odfe-rpm-knn-nosec,odfe-rpm-ad-nosec,"
          RUNNERS+="odfe-rpm-ad-kibana-nosec"
          .github/scripts/setup_runners.sh terminate $RUNNERS ${{ secrets.ODFE_RELEASE_BOT_PUBLIC_PRIVATE_READ_WRITE_TOKEN }}

