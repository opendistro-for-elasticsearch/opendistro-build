name: Process RPM Artifacts

on:
  schedule:
    - cron: '0 10 * * *'
  repository_dispatch:
    types: [build-rpm]
  
jobs:
  plugin-avilability:
    name: Check Plugin Availability
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v1
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
      - name: Checking Availability
        run: |
          #!/bin/bash
          CURRENT_NO_PLUGINS=7
          PLUGINS="opendistro-anomaly-detection/opendistro-anomaly-detection opendistro-sql/opendistro_sql opendistro-alerting/opendistro_alerting opendistro-job-scheduler/opendistro-job-scheduler opendistro-security/opendistro_security performance-analyzer/opendistro_performance_analyzer opendistro-index-management/opendistro_index_management opendistro-knn/opendistro-knn"
          
          cd elasticsearch/bin
          ls -ltr
          OD_VERSION=`./version-info --od`
          echo "$OD_VERSION"
          cd /home/runner/work/opendistro-build
          mkdir plugins
          ls -ltr
          cd plugins
          
          for item in $PLUGINS
          do
            plugin_folder=`echo $item|awk -F/ '{print $1}'`
            plguin_item=`echo $item|awk -F/ '{print $2}'`
            echo $plugin_folder.$plguin_item
            aws s3 cp s3://artifacts.opendistroforelasticsearch.amazon.com/downloads/elasticsearch-plugins/$plugin_folder/ . --recursive --exclude "*" --include "$plguin_item-$OD_VERSION*"
          done
          ls -ltr
          tot_plugins=`ls|wc -l`
          echo $tot_plugins
          
          if [ $tot_plugins == $CURRENT_NO_PLUGINS ]
          then
              echo "All plugins available"
          else
              exit 1
          fi
          
  build-es-artifacts:
    needs: [plugin-avilability]
    name: Build ES Artifacts
    runs-on: ubuntu-latest
    container:
      image: opendistroforelasticsearch/multijava08101112-git:v1

    steps:
      - uses: actions/checkout@v1
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
      - name: Build rpm
        run: |
          #!/bin/bash -x
          set -e
          set -u
          export JAVA_HOME=/openjdk12
          export PATH=$JAVA_HOME:$PATH
          cd elasticsearch/linux_distributions
          ./gradlew buildRpm --console=plain -Dbuild.snapshot=false -b ./build.gradle
          rpm_artifact=`ls build/distributions/*.rpm`
          ls -ltr build/distributions/*.rpm

          aws s3 cp $rpm_artifact s3://artifacts.opendistroforelasticsearch.amazon.com/downloads/rpms/opendistro-elasticsearch/
          aws cloudfront create-invalidation --distribution-id E1VG5HMIWI4SA2 --paths "/downloads/*"

          echo "RPM creation for ES completed"

  build-kibana-artifacts:
    needs: [plugin-avilability]
    name: Build Kibana Artifacts
    runs-on: [ubuntu-latest]
    container:
      image: opendistroforelasticsearch/jsenv:v1
    steps:
      - uses: actions/checkout@v1
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
      - name: Build Kibana rpm
        run: |
          #!/bin/bash -x
          cd kibana/linux_distributions
          sh generate-pkg.sh
          rpm_artifact=`ls target/*.rpm`
          echo $rpm_artifact
          aws s3 cp $rpm_artifact s3://artifacts.opendistroforelasticsearch.amazon.com/downloads/rpms/opendistroforelasticsearch-kibana/

  signing-artifacts:   
    name: Sign Yum
    runs-on: [ubuntu-16.04]
    container: 
      image: amazonlinux
    needs: [build-es-artifacts, build-kibana-artifacts]
    steps:
      - uses: actions/checkout@v1
        
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
      - name: Sign And Upload Artifacts
        env:
          passphrase: ${{ secrets.RPM_SIGN_PASSPHRASE }}
        run: |
          yum update -y
          yum install -y unzip
          sleep 5
          curl "https://s3.amazonaws.com/aws-cli/awscli-bundle.zip" -o "awscli-bundle.zip"
          unzip awscli-bundle.zip
          ./awscli-bundle/install -b ~/bin/aws
          sleep 5
          chmod 755 elasticsearch/linux_distributions/scripts/rpm-addsign.exp
          sh elasticsearch/linux_distributions/rpm-signing.sh $passphrase
          
  Build-ES-and-Kibana-Centos-Docker:
    needs: [signing-artifacts]
    runs-on: [ubuntu-latest]
    name: Build Centos image for Sanity Testing
    steps:
      - uses: actions/checkout@v1
      - name: Checkout Opendistro-Infra
        uses: actions/checkout@v1
        with:
          repository: opendistro-for-elasticsearch/opendistro-infra
          ref: jenkins-test
          token: ${{ secrets.READ_TOKEN }}
      - name: Build Centos Docker Image
        env:
          DOCKER_USER: ${{ secrets.DOCKER_USER }}
          DOCKER_PASS: ${{ secrets.DOCKER_PASS }}
        run: |
          cd elasticsearch/linux_distributions
          ES_VER=`../bin/version-info --es`
          ODFE_VER=`../bin/version-info --od`
          cd ../../..
          cd opendistro-infra/scripts/dockerfiles/tests/elasticsearch
          docker build --build-arg VER=$ODFE_VER -t opendistroforelasticsearch/elasticsearch-test-centos:$ODFE_VER -f opendistro.elasticsearch.test.centos.Dockerfile .
          
          cd ../kibana
          docker build -t opendistroforelasticsearch/kibana-test-centos:$ODFE_VER -f opendistro.kibana.test.centos.Dockerfile .
          
          echo "******************************"
          echo "Login to Docker"
          echo "******************************"
          docker login --username $DOCKER_USER --password $DOCKER_PASS
          
          docker push opendistroforelasticsearch/elasticsearch-test-centos:$ODFE_VER
          sleep 5
          docker push opendistroforelasticsearch/kibana-test-centos:$ODFE_VER
          
      - name: Create Email Message
        run: |
          echo "<h2>Docker Images for Centos Are Ready</h2>" >> Message.md
          echo "<h3> ES Image for Centos Testing: opendistroforelasticsearch/elasticsearch-test-centos:Version-Tag </h3>" >> Message.md
          echo "<h3> Kibana Image for Centos Testing: opendistroforelasticsearch/kibana-test-centos:Version-Tag </h3>" >> Message.md
          
      - name: Send Mail
        uses: dawidd6/action-send-mail@master
        with:
          server_address: smtp.gmail.com
          server_port: 465
          username: ${{secrets.MAIL_USERNAME}}
          password: ${{secrets.MAIL_PASSWORD}}
          subject: Opendistro for Elasticsearch Build - Centos Images For Testing
          # Read file contents as body:
          body: file://Message.md
          to: sngri@amazon.com,odfe-distribution-build@amazon.com
          from: Opendistro Elasticsearch
          # Optional content type:
          content_type: text/html
