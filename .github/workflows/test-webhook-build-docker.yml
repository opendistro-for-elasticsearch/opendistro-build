name: Webhook Build ES Docker on Dispatch
on: 
#   schedule:
#     - cron: '30 10 * * *'
  repository_dispatch:
    types: [build-docker]
jobs:
  build-es-docker:
    strategy:
      matrix:
        java: [13]
    name: Build ES Docker
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v1

    - name: Checkout ISM
      uses: actions/checkout@v1
      with:
        repository: opendistro-for-elasticsearch/index-management
        ref: master

    - name: Checkout Alerting
      uses: actions/checkout@v1
      with:
        repository: opendistro-for-elasticsearch/alerting
        ref: master

    - name: Checkout SQL
      uses: actions/checkout@v1
      with:
        repository: opendistro-for-elasticsearch/sql
        ref: master
        
    - name: Checkout k-NN
      uses: actions/checkout@v1
      with:
        repository: opendistro-for-elasticsearch/k-NN
        ref: master

    - name: Configure AWS
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1

    - name: Set Up JDK ${{ matrix.java }}
      uses: actions/setup-java@v1
      with:
        java-version: ${{ matrix.java }}

    - name: Starting ES Docker Build
      env:
        DOCKER_USER: ${{ secrets.DOCKER_USER }}
        DOCKER_PASS: ${{ secrets.DOCKER_PASS }}
      run: |
        echo "Executing On-demand Build for ES Docker Image"
        workdir=`pwd`
        sudo apt-get install python-virtualenv
        ./download_plugins.sh
        cd elasticsearch/bin
        ODFE_VER=`./version-info --od`
        echo "ODFE VERSION $ODFE_VER"
        cd ..
        security=`ls docker/build/elasticsearch/plugins/|grep opendistro_security|wc -l`
        
        if [ $security -gt 0 ]
        then
           echo "Security plugin is available"
        else
           echo "Security plugin is NOT available"
        fi
        
        cd docker
        make build
        
        echo "******************************"
        echo "Login to Docker"
        echo "******************************"
        docker login --username $DOCKER_USER --password $DOCKER_PASS
        docker images|grep "amazon/opendistro-for-elasticsearch" > docker_id.out
        image_id=`awk -F' ' '{print $3}' docker_id.out`
        echo "Docker Id is $image_id"
        docker tag $image_id opendistroforelasticsearch/opendistroforelasticsearch:$ODFE_VER
        docker images
        docker push opendistroforelasticsearch/opendistroforelasticsearch:$ODFE_VER
        #echo "<h2>The docker image opendistroforelasticsearch/opendistroforelasticsearch:$ODFE_VER for ODFE has been created and uploaded to docker-hub</h2>" >> $workdir/Release.md
        cd ../../..
        ls -ltr
        
        #Run Docker Container without security
        if [ $security -gt 0 ]
        then
           echo "Running newly tagged image with no security"
           echo "FROM opendistroforelasticsearch/opendistroforelasticsearch:$ODFE_VER" >> Dockerfile
           echo "RUN /usr/share/elasticsearch/bin/elasticsearch-plugin remove opendistro_security" >> Dockerfile
           docker build -t odfe-http:no-security .
           sleep 5
     
           docker run -p 9200:9200 -d -p 9600:9600 -e "discovery.type=single-node" odfe-http:no-security
        else
           echo "Running originially created docker image"
           docker run -p 9200:9200 -d -p 9600:9600 -e "discovery.type=single-node" opendistroforelasticsearch/opendistroforelasticsearch:$ODFE_VER
        fi
    
    - name: Create Email Message
      run: |
        echo "<h2>On-Demand Opendsitro Docker Image is Ready</h2>" >> Message.md
        echo "<h3>Docker Image: opendistroforelasticsearch/opendistroforelasticsearch:<VERSION-TAG></h3>" >> Message.md
    
    - name: Send Email
      uses: dawidd6/action-send-mail@master
      with:
        server_address: smtp.gmail.com
        server_port: 465
        username: ${{secrets.MAIL_USERNAME}}
        password: ${{secrets.MAIL_PASSWORD}}
        subject: Opendistro for Elasticsearch Build - On-Demand ODFE Image is Ready
        # Read file contents as body:
        body: file://Message.md
        to: sngri@amazon.com,odfe-distribution-build@amazon.com
        from: Opendistro Elasticsearch
        # Optional content type:
        content_type: text/html
          
    - name: Test ISM Plugin
      continue-on-error: true
      run: |
        cd ..
        sleep 15
        curl -XGET http://localhost:9200/_cat/plugins > plugins.out
        
        if cat plugins.out|grep opendistro_index_management
        then
          cd index-management
          ./gradlew integTest -Dtests.rest.cluster=localhost:9200 -Dtests.cluster=localhost:9200
        else
          echo "Skipping Test as Plugin not available"
        fi

    - name: Test Alerting Plugin
      continue-on-error: true
      run: |
        cd ..
        if cat plugins.out|grep opendistro_alerting
        then
          cd alerting/alerting
          ../gradlew integTest -Dtests.rest.cluster=localhost:9200 -Dtests.cluster=localhost:9200
        else
          echo "Skipping Test as Plugin not available"
        fi
        
    - name: Test SQL Plugin
      continue-on-error: true
      run: |
        cd ..
        if cat plugins.out|grep opendistro_sql
        then
          cd sql
          ./gradlew integTest -Dtests.rest.cluster=localhost:9200 -Dtests.cluster=localhost:9200
        else
          echo "Skipping Test as Plugin not available"
        fi
        
    - name: Test k-NN Plugin
      continue-on-error: true
      run: |
        cd ..
        if cat plugins.out|grep opendistro-knn
        then
          cd k-NN
          ./gradlew integTest -Dtests.rest.cluster=localhost:9200 -Dtests.cluster=localhost:9200
        else
          echo "Skipping Test as Plugin not available"
        fi
        
  build-kibana-docker:
    runs-on: [ubuntu-16.04]
    name: Build Kibana Docker
    steps:
      - uses: actions/checkout@v2
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
      - name: Build Kibana Docker
        env:
          DOCKER_USER: ${{ secrets.DOCKER_USER }}
          DOCKER_PASS: ${{ secrets.DOCKER_PASS }}
        run: |
          sudo apt-get install python-virtualenv
          ./download_kibana_plugins.sh
          cd kibana/bin
          ODFE_VER=`./version-info --od`
          echo "ODFE VERSION $ODFE_VER"
          cd ..
          cd docker
          make build
          
          echo "******************************"
          echo "Uploading Kibana Docker"
          echo "******************************"
          docker login --username $DOCKER_USER --password $DOCKER_PASS
          docker images|grep "amazon/opendistro-for-elasticsearch-kibana" > kibana_id.out
          kibana_image_id=`awk -F' ' '{print $3}' kibana_id.out`
          echo "Docker Id is $kibana_image_id"
          docker tag $kibana_image_id opendistroforelasticsearch/opendistroforelasticsearch-kibana:$ODFE_VER
          docker push opendistroforelasticsearch/opendistroforelasticsearch-kibana:$ODFE_VER
          
      - name: Create Email Message
        run: |
          echo "<h2>On-Demand Opendsitro Kibana Docker Image is Ready</h2>" >> Message.md
          echo "<h3>Docker Image: opendistroforelasticsearch/opendistroforelasticsearch-kibana:<VERSION-TAG></h3>" >> Message.md
          
      - name: Send Email
        uses: dawidd6/action-send-mail@master
        with:
          server_address: smtp.gmail.com
          server_port: 465
          username: ${{secrets.MAIL_USERNAME}}
          password: ${{secrets.MAIL_PASSWORD}}
          subject: Opendistro for Elasticsearch Build - On-Demand ODFE Kibana Image
          # Read file contents as body:
          body: file://Message.md
          to: sngri@amazon.com,odfe-distribution-build@amazon.com
          from: Opendistro Elasticsearch
          # Optional content type:
          content_type: text/html
        
         
