name: Build Windows Exe using tar artifacts

on:
  push:
    branches:
      - "gantt-chart"

jobs:
  Set-Env:
    name: Set-Env
    runs-on: ubuntu-latest
    outputs:
      es_version: ${{ steps.req.outputs.es_version }}
      p_tag_kib_nb: ${{ steps.req.outputs.p_tag_kib_nb }}
    steps:
      - uses: actions/checkout@v1
      - name: Required packages
        id: req
        run: |
          release-tools/scripts/required_packages.sh
          echo ::set-output name=es_version::$(release-tools/scripts/version-info.sh --es)
          echo ::set-output name=p_tag_kib_nb::$(release-tools/scripts/plugin_tag.sh opendistro-for-elasticsearch/kibana-notebooks)

  Test-Kibana-Notebooks-NoSec:
    needs: [Set-Env]
    runs-on: windows-latest
    name: Test-Kibana-Notebooks-NoSec
    strategy:
      fail-fast: false
      matrix:
        java: [14]
    steps:
      - uses: actions/checkout@v1
      - name: Set up AWS Cred
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
          
      - name: Checkout Kibana
        uses: actions/checkout@v2
        with:
          repository: opendistro-for-elasticsearch/kibana-oss
          ref: ${{needs.Set-Env.outputs.es_version}}
          token: ${{ secrets.ODFE_RELEASE_BOT_PUBLIC_PRIVATE_READ_WRITE_TOKEN }}
          path: kibana
           
      - uses: actions/checkout@v2
        with:
          repository: opendistro-for-elasticsearch/kibana-notebooks
          # ref: ${{needs.Set-Env.outputs.p_tag_kib_nb}}
          ref: dev
          path: kibana/plugins/kibana-nb
      
      - name: Setup Java
        uses: actions/setup-java@v1
        with:
          java-version: ${{ matrix.java }}
      
      - name: Get node and yarn versions
        id: node_yarn_versions
        run: |
          echo "kibana_node_version=$(node -p "(require('./kibana/package.json').engines.node).match(/[.0-9]+/)[0]")" >> $GITHUB_ENV
          echo "kibana_yarn_version=$(node -p "(require('./kibana/package.json').engines.yarn).match(/[.0-9]+/)[0]")" >> $GITHUB_ENV   
        shell: bash

      - name: Setup node
        uses: actions/setup-node@v1
        with:
          node-version: ${{env.kibana_node_version}}
          registry-url: 'https://registry.npmjs.org'
      
      - name: Install correct yarn version for Kibana
        run: |
          npm uninstall -g yarn
          echo "Installing yarn ${{ env.kibana_yarn_version }}"
          npm i -g yarn@${{ env.kibana_yarn_version }}
          npm install
          npm install --save-dev --global @babel/core @babel/cli babel-preset-es2015
      
      - name: Bootstrap the plugin
        run: |
          cd ./kibana/plugins/
          cp -rp kibana-nb/kibana-notebooks .
          rm -rf kibana-nb
          cd kibana-notebooks
          yarn cache clean
          yarn kbn bootstrap
        shell: bash

      - name: Run ES and kibana and IT (RUN IN ONE STEP OR WINDOWS WILL BREAK)
        run: |
          release-tools\scripts\setup_runners_service_windows.ps1 --kibana-nosec
          cd ./kibana/plugins/kibana-notebooks
          npx cypress run

