name: Process RPM Artifacts

on:
  # schedule:
  #   - cron: '0 10 * * *'
  repository_dispatch:
    types: [test-build-rpm]

jobs:
  plugin-availability:
    name: Check Plugin Availability
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v1
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Run check_plugin scripts
        run: .github/scripts/check_plugin.sh "rpm,kibana"; exit `cat /tmp/plugin_status.check`

  build-es-artifacts:
    needs: [plugin-availability]
    name: Build ES Artifacts
    runs-on: ubuntu-latest
    container:
      image: opendistroforelasticsearch/multijava08101112-git:v1

    steps:
      - uses: actions/checkout@v1
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
      - name: Build rpm
        run: |
          #!/bin/bash -x
          set -e
          set -u
          export JAVA_HOME=/openjdk12
          export PATH=$JAVA_HOME:$PATH
          cd elasticsearch/linux_distributions
          ./gradlew buildRpm --console=plain -Dbuild.snapshot=false -b ./build.gradle
          rpm_artifact=`ls build/distributions/*.rpm`
          ls -ltr build/distributions/*.rpm

          aws s3 cp $rpm_artifact s3://artifacts.opendistroforelasticsearch.amazon.com/downloads/rpms/opendistro-elasticsearch/
          aws cloudfront create-invalidation --distribution-id E1VG5HMIWI4SA2 --paths "/downloads/*"

          echo "RPM creation for ES completed"

  build-kibana-artifacts:
    needs: [plugin-availability]
    name: Build Kibana Artifacts
    runs-on: [ubuntu-latest]
    container:
      image: opendistroforelasticsearch/jsenv:v1
    steps:
      - uses: actions/checkout@v1
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
      - name: Build Kibana rpm
        run: ./kibana/linux_distributions/opendistro-kibana-build.sh rpm

  signing-artifacts:   
    name: Sign Yum
    runs-on: [ubuntu-16.04]
    container: 
      image: amazonlinux
    needs: [build-es-artifacts, build-kibana-artifacts]
    steps:
      - uses: actions/checkout@v1
        
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
      - name: Sign And Upload Artifacts
        env:
          passphrase: ${{ secrets.RPM_SIGN_PASSPHRASE }}
        run: |
          yum update -y
          yum install -y unzip
          sleep 5
          curl "https://s3.amazonaws.com/aws-cli/awscli-bundle.zip" -o "awscli-bundle.zip"
          unzip awscli-bundle.zip
          ./awscli-bundle/install -b ~/bin/aws
          sleep 5
          chmod 755 elasticsearch/linux_distributions/scripts/rpm-addsign.exp
          sh elasticsearch/linux_distributions/rpm-signing.sh $passphrase
          
  Build-ES-and-Kibana-Centos-Docker:
    needs: [signing-artifacts]
    runs-on: [ubuntu-latest]
    name: Build Centos image for Sanity Testing
    steps:
      - uses: actions/checkout@v1
      - name: Checkout Opendistro-Infra
        uses: actions/checkout@v1
        with:
          repository: opendistro-for-elasticsearch/opendistro-infra
          ref: jenkins-test
          token: ${{ secrets.READ_TOKEN }}
      - name: Build Centos Docker Image
        env:
          DOCKER_USER: ${{ secrets.DOCKER_USER }}
          DOCKER_PASS: ${{ secrets.DOCKER_PASS }}
        run: |
          ES_VER=`./bin/version-info --es`
          ODFE_VER=`./bin/version-info --od`
          cd elasticsearch/linux_distributions
          cd ../../..
          cd opendistro-infra/scripts/dockerfiles/tests/elasticsearch
          docker build --build-arg VER=$ODFE_VER -t opendistroforelasticsearch/elasticsearch-test-centos:$ODFE_VER -f opendistro.elasticsearch.test.centos.Dockerfile .
          
          cd ../kibana
          docker build -t opendistroforelasticsearch/kibana-test-centos:$ODFE_VER -f opendistro.kibana.test.centos.Dockerfile .
          
          echo "******************************"
          echo "Login to Docker"
          echo "******************************"
          docker login --username $DOCKER_USER --password $DOCKER_PASS
          
          docker push opendistroforelasticsearch/elasticsearch-test-centos:$ODFE_VER
          sleep 5
          docker push opendistroforelasticsearch/kibana-test-centos:$ODFE_VER
          
      - name: Create Email Message
        run: |
          echo "<h2>Docker Images for Centos Are Ready</h2>" >> Message.md
          echo "<h3> ES Image for Centos Testing: opendistroforelasticsearch/elasticsearch-test-centos:Version-Tag </h3>" >> Message.md
          echo "<h3> Kibana Image for Centos Testing: opendistroforelasticsearch/kibana-test-centos:Version-Tag </h3>" >> Message.md
          
      - name: Send Mail
        uses: dawidd6/action-send-mail@master
        with:
          server_address: smtp.gmail.com
          server_port: 465
          username: ${{secrets.MAIL_USERNAME}}
          password: ${{secrets.MAIL_PASSWORD}}
          subject: Opendistro for Elasticsearch Build - Centos Images For Testing
          # Read file contents as body:
          body: file://Message.md
          to: odfe-distribution-build@amazon.com
          from: Opendistro Elasticsearch
          # Optional content type:
          content_type: text/html


  Start-ES-Service:
    needs: [signing-artifacts]
    name: Start elasticsearch service
    runs-on: [self-hosted, Linux, X64, odfe-rpm]
    steps:
      - uses: actions/checkout@v1

      - name: Setup Java
        uses: actions/setup-java@v1
        with:
          java-version: 14
      
      - name: Installing python
        run: sudo yum install python37 -y
      
      - name: Getting OD version
        run: |
          OD_VERSION=`./bin/version-info --od`
          echo "::set-env name=od_version::$OD_VERSION"

      - name: Starting ES service
        run: |
          echo $JAVA_HOME
          sudo yum install git -y
          sudo curl https://d3g5vo6xdbdb9a.cloudfront.net/yum/staging-opendistroforelasticsearch-artifacts.repo  -o /etc/yum.repos.d/staging-opendistroforelasticsearch-artifacts.repo
          sudo yum install wget -y
          export PATH=$PATH:$JAVA_HOME
          sudo yum install unzip -y
          sudo yum install opendistroforelasticsearch-${{env.od_version}} -y
          sudo mkdir /home/repo
          sudo chmod 777 /home/repo
          sudo chmod 777 /etc/elasticsearch/elasticsearch.yml    
          sudo /usr/share/elasticsearch/bin/elasticsearch-plugin remove opendistro_security
          sudo sed -i '/path.logs/a path.repo: ["/home/repo"]' /etc/elasticsearch/elasticsearch.yml 
          sudo sed -i /^opendistro_security/d /etc/elasticsearch/elasticsearch.yml
          sudo sed -i /CN=kirk/d /etc/elasticsearch/elasticsearch.yml
          sudo sed -i /^node.max_local_storage_nodes/d /etc/elasticsearch/elasticsearch.yml
          sudo sed -i /^cluster.routing.allocation.disk.threshold_enabled/d /etc/elasticsearch/elasticsearch.yml
          sudo systemctl start elasticsearch.service
          sleep 30
    
  Test-All-Plugins:
    needs: [Start-ES-Service]
    runs-on: [self-hosted, Linux, X64, odfe-rpm]
    steps:
      - name: Setup Java
        uses: actions/setup-java@v1
        with:
          java-version: 14
    
      - name: Installing python
        run: sudo yum install python37 -y

      - name: Getting OD Version
        run: |
          OD_VERSION=`./bin/version-info --od`
          plugin_tag=v$OD_VERSION.0
          echo "::set-env name=tag::$plugin_tag"

      - name: Checking out ISM repo
        if: always()
        uses: actions/checkout@v1
        with:
          repository: opendistro-for-elasticsearch/index-management
          ref: ${{env.tag}}

      - name: IT for ISM
        if: always()
        run: |  
          export PATH=$PATH:$JAVA_HOME
          cd $GITHUB_WORKSPACE/../index-management
          ./gradlew integTest -Dtests.rest.cluster=localhost:9200 -Dtests.cluster=localhost:9200 -Dtests.clustername=es-integrationtest

      - name: Checking out Alerting repo
        if: always()
        uses: actions/checkout@v1
        with:
          repository: opendistro-for-elasticsearch/alerting
          ref: ${{env.tag}}

      - name: IT for alerting
        if: always()
        run: |
          export PATH=$PATH:$JAVA_HOME
          cd $GITHUB_WORKSPACE/../alerting
          ./gradlew integTest -Dtests.rest.cluster=localhost:9200 -Dtests.cluster=localhost:9200 -Dtests.clustername=es-integrationtest

      - name: Checking out SQL repo
        if: always()
        uses: actions/checkout@v1
        with:
          repository: opendistro-for-elasticsearch/sql
          ref: ${{env.tag}}
      
      - name: IT for SQL
        if: always()
        run: |
          export PATH=$PATH:$JAVA_HOME
          cd $GITHUB_WORKSPACE/../sql
          ./gradlew integTest -Dtests.rest.cluster=localhost:9200 -Dtests.cluster=localhost:9200 -Dtests.clustername=es-integrationtest

      - name: Checking out k-NN repo
        if: always()
        uses: actions/checkout@v1
        with:
          repository: opendistro-for-elasticsearch/k-NN
          ref: ${{env.tag}}
          
      - name: IT for KNN
        if: always()
        run: |
          export PATH=$PATH:$JAVA_HOME
          cd $GITHUB_WORKSPACE/../k-NN
          ./gradlew integTest -Dtests.rest.cluster=localhost:9200 -Dtests.cluster=localhost:9200 -Dtests.clustername=es-integrationtest

  Cleaning-Host:
    needs: [Test-All-Plugins]
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Configuring AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_EC2_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_EC2_SECRET_ACCESS_KEY }}
          aws-region: us-west-2

      - name: Resetting the host runner
        run: |
          #!/bin/bash
          instanceid=`aws ec2 describe-instances --filters "Name=tag:Name,Values=ODFE-RPM" | grep InstanceId | cut -d ':' -f 2 | sed 's/[",]//g'`
          volumeid=`aws ec2 describe-instances --filters "Name=tag:Name,Values=ODFE-RPM" | grep VolumeId | cut -d ':' -f 2 | sed 's/[",]//g'`
          az=`aws ec2 describe-instances --filters "Name=tag:Name,Values=ODFE-RPM" | grep AvailabilityZone | cut -d ':' -f 2 | sed 's/[",]//g'`
          aws ec2 stop-instances --instance-ids $instanceid
          sleep 4m
          aws ec2 detach-volume --volume-id $volumeid
          if [[ `echo $?` -ne 0 ]]; then
          sleep 60
          aws ec2 detach-volume --volume-id $volumeid
          fi
          aws ec2 delete-volume --volume-id $volumeid
          aws ec2 create-volume --snapshot snap-0f8358ed344f3c2e6 --availability-zone $az --tag-specifications 'ResourceType=volume,Tags=[{Key=Name,Value=odfe}]'
          sleep 30
          newVolumeId=`aws ec2 describe-volumes --filters "Name=tag:Name,Values=odfe" | grep VolumeId | cut -d ':' -f 2 | sed 's/[",]//g'`
          aws ec2 attach-volume --device /dev/xvda --instance-id $instanceid --volume-id $newVolumeId
          aws ec2 start-instances --instance-id $instanceid
          sleep 30
          echo "Your Self hosted runner is as new now!!!"
