name: Process DEB Artifacts ARM64

on:
  # schedule:
  #   - cron: '0 10 * * *'
  repository_dispatch:
    types: [staging-build-deb-arm64]

jobs:
  Provision-Runners:
    name: Provision-Runners
    runs-on: ubuntu-18.04
    steps:
      - uses: actions/checkout@v1
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_EC2_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_EC2_SECRET_ACCESS_KEY }}
          aws-region: us-west-2
      - name: AWS Cli Processing
        run: |
          #!/bin/bash
          # Please add comma at the end of the RUNNERS strings
          # Don't add space after commas
          RUNNERS="odfe-deb-im-nosec-arm64,odfe-deb-alerting-nosec-arm64,odfe-deb-sql-nosec-arm64,odfe-deb-knn-nosec-arm64,odfe-deb-ad-nosec-arm64,"
          RUNNERS+="odfe-deb-sql-arm64,odfe-deb-ad-arm64,odfe-deb-im-arm64,odfe-deb-alerting-arm64,"
          RUNNERS+="odfe-deb-ad-kibana-nosec-arm64,odfe-deb-sql-kibana-nosec-arm64,"
          RUNNERS+="odfe-deb-ad-kibana-arm64,odfe-deb-sec-kibana-arm64,odfe-deb-kibana-nb-nosec-arm64"
          release-tools/scripts/setup_runners.sh run $RUNNERS ${{ secrets.ODFE_RELEASE_BOT_PUBLIC_PRIVATE_READ_WRITE_TOKEN }} ami-055197d43e4ec7482

  Test-IM-NoSec:
    needs: [Provision-Runners]
    name: Test-IM-NoSec
    runs-on: [self-hosted, Linux, ARM64, odfe-deb-im-nosec-arm64]
    steps:
      - uses: actions/checkout@v1
      - name: Required Packages
        run: release-tools/scripts/required_packages.sh
      - name: Retrieve plugin tags
        run: echo "p_tag_im=$(release-tools/scripts/plugin_tag.sh opendistro-for-elasticsearch/index-management)" >> $GITHUB_ENV
      - uses: actions/checkout@v1
        with:
          repository: opendistro-for-elasticsearch/index-management
          ref: ${{env.p_tag_im}}
      - name: IT for IM NoSec
        run: |
          release-tools/scripts/setup_runners_service.sh deb --es-nosec
          export PATH=$JAVA_HOME:$PATH; cd $GITHUB_WORKSPACE/../index-management; pwd
          ./gradlew integTest -Dtests.rest.cluster=localhost:9200 -Dtests.cluster=localhost:9200 -Dtests.clustername=es-integrationtest

  Test-ALERTING-NoSec:
    needs: [Provision-Runners]
    name: Test-ALERTING-NoSec
    runs-on: [self-hosted, Linux, ARM64, odfe-deb-alerting-nosec-arm64]
    steps:
      - uses: actions/checkout@v1
      - name: Required Packages
        run: release-tools/scripts/required_packages.sh
      - name: Retrieve plugin tags
        run: echo "p_tag_alerting=$(release-tools/scripts/plugin_tag.sh opendistro-for-elasticsearch/alerting)" >> $GITHUB_ENV
      - uses: actions/checkout@v1
        with:
          repository: opendistro-for-elasticsearch/alerting
          ref: ${{env.p_tag_alerting}}
      - name: IT for ALERTING NoSec
        run: |
          release-tools/scripts/setup_runners_service.sh deb --es-nosec
          export PATH=$JAVA_HOME:$PATH; cd $GITHUB_WORKSPACE/../alerting/alerting; pwd
          ../gradlew integTest -Dtests.rest.cluster=localhost:9200 -Dtests.cluster=localhost:9200 -Dtests.clustername=es-integrationtest

  Test-SQL-NoSec:
    needs: [Provision-Runners]
    name: Test-SQL-NoSec
    runs-on: [self-hosted, Linux, ARM64, odfe-deb-sql-nosec-arm64]
    steps:
      - uses: actions/checkout@v1
      - name: Required Packages
        run: release-tools/scripts/required_packages.sh
      - name: Retrieve plugin tags
        run: echo "p_tag_sql=$(release-tools/scripts/plugin_tag.sh opendistro-for-elasticsearch/sql)" >> $GITHUB_ENV
      - uses: actions/checkout@v1
        with:
          repository: opendistro-for-elasticsearch/sql
          ref: ${{env.p_tag_sql}}
      - name: IT for SQL NoSec
        run: |
          release-tools/scripts/setup_runners_service.sh deb --es-nosec
          export PATH=$JAVA_HOME:$PATH; cd $GITHUB_WORKSPACE/../sql; pwd
          ./gradlew integTest -Dtests.rest.cluster=localhost:9200 -Dtests.cluster=localhost:9200 -Dtests.clustername=es-integrationtest

  Test-KNN-NoSec:
    needs: [Provision-Runners]
    name: Test-KNN-NoSec
    runs-on: [self-hosted, Linux, ARM64, odfe-deb-knn-nosec-arm64]
    steps:
      - uses: actions/checkout@v1
      - name: Required Packages
        run: release-tools/scripts/required_packages.sh
      - name: Retrieve plugin tags
        run: echo "p_tag_knn=$(release-tools/scripts/plugin_tag.sh opendistro-for-elasticsearch/k-NN)" >> $GITHUB_ENV
      - uses: actions/checkout@v1
        with:
          repository: opendistro-for-elasticsearch/k-NN
          ref: ${{env.p_tag_knn}}
      - name: IT for KNN NoSec
        run: |
          release-tools/scripts/setup_runners_service.sh deb --es-nosec
          export PATH=$JAVA_HOME:$PATH; cd $GITHUB_WORKSPACE/../k-NN; pwd
          ./gradlew integTest -Dtests.rest.cluster=localhost:9200 -Dtests.cluster=localhost:9200 -Dtests.clustername=es-integrationtest

  Test-AD-NoSec:
    needs: [Provision-Runners]
    name: Test-AD-NoSec
    runs-on: [self-hosted, Linux, ARM64, odfe-deb-ad-nosec-arm64]
    steps:
      - uses: actions/checkout@v1
      - name: Required Packages
        run: release-tools/scripts/required_packages.sh
      - name: Retrieve plugin tags
        run: echo "p_tag_ad=$(release-tools/scripts/plugin_tag.sh opendistro-for-elasticsearch/anomaly-detection)" >> $GITHUB_ENV
      - uses: actions/checkout@v1
        with:
          repository: opendistro-for-elasticsearch/anomaly-detection
          ref: ${{env.p_tag_ad}}
      - name: IT for AD NoSec
        run: |
          release-tools/scripts/setup_runners_service.sh deb --es-nosec
          export PATH=$JAVA_HOME:$PATH; cd $GITHUB_WORKSPACE/../anomaly-detection; pwd
          ./gradlew integTest -Dtests.rest.cluster=localhost:9200 -Dtests.cluster=localhost:9200 -Dtests.clustername="es-integrationtest"

  Test-SQL:
    needs: [Provision-Runners]
    name: Test-SQL
    runs-on: [self-hosted, Linux, ARM64, odfe-deb-sql-arm64]
    steps:
      - uses: actions/checkout@v1
      - name: Required Packages
        run: release-tools/scripts/required_packages.sh
      - name: Retrieve plugin tags
        run: echo "p_tag_sql=$(release-tools/scripts/plugin_tag.sh opendistro-for-elasticsearch/sql)" >> $GITHUB_ENV
      - uses: actions/checkout@v1
        with:
          repository: opendistro-for-elasticsearch/sql
          ref: ${{env.p_tag_sql}}
      - name: IT for SQL
        run: |
          release-tools/scripts/setup_runners_service.sh deb --es
          export PATH=$JAVA_HOME:$PATH; cd $GITHUB_WORKSPACE/../sql; pwd
          ./gradlew integTest -Dtests.rest.cluster=localhost:9200 -Dtests.cluster=localhost:9200 -Dtests.clustername=es-integrationtest -Dhttps=true -Duser=admin -Dpassword=admin

  Test-AD:
    needs: [Provision-Runners]
    name: Test-AD
    runs-on: [self-hosted, Linux, ARM64, odfe-deb-ad-arm64]
    steps:
      - uses: actions/checkout@v1
      - name: Required Packages
        run: release-tools/scripts/required_packages.sh
      - name: Retrieve plugin tags
        run: echo "p_tag_ad=$(release-tools/scripts/plugin_tag.sh opendistro-for-elasticsearch/anomaly-detection)" >> $GITHUB_ENV
      - uses: actions/checkout@v1
        with:
          repository: opendistro-for-elasticsearch/anomaly-detection
          ref: ${{env.p_tag_ad}}
      - name: IT for AD
        run: |
          release-tools/scripts/setup_runners_service.sh deb --es
          export PATH=$JAVA_HOME:$PATH; cd $GITHUB_WORKSPACE/../anomaly-detection; pwd
          ./gradlew integTest -Dtests.rest.cluster=localhost:9200 -Dtests.cluster=localhost:9200 -Dtests.clustername="es-integrationtest" -Dhttps=true -Duser=admin -Dpassword=admin

  Test-IM:
    needs: [Provision-Runners]
    name: Test-IM
    runs-on: [self-hosted, Linux, ARM64, odfe-deb-im-arm64]
    steps:
      - uses: actions/checkout@v1
      - name: Required Packages
        run: release-tools/scripts/required_packages.sh
      - name: Retrieve plugin tags
        run: echo "p_tag_im=$(release-tools/scripts/plugin_tag.sh opendistro-for-elasticsearch/index-management)" >> $GITHUB_ENV
      - uses: actions/checkout@v1
        with:
          repository: opendistro-for-elasticsearch/index-management
          ref: ${{env.p_tag_im}}
      - name: IT for Index Management
        run: |
          release-tools/scripts/setup_runners_service.sh deb --es
          export PATH=$JAVA_HOME:$PATH; cd $GITHUB_WORKSPACE/../index-management; pwd
          ./gradlew integTest -Dtests.rest.cluster=localhost:9200 -Dtests.cluster=localhost:9200 -Dtests.clustername=es-integrationtest -Dhttps=true -Duser=admin -Dpassword=admin

  Test-ALERTING:
    needs: [Provision-Runners]
    name: Test-ALERTING
    runs-on: [self-hosted, Linux, ARM64, odfe-deb-alerting-arm64]
    steps:
      - uses: actions/checkout@v1
      - name: Required Packages
        run: release-tools/scripts/required_packages.sh
      - name: Retrieve plugin tags
        run: echo "p_tag_alerting=$(release-tools/scripts/plugin_tag.sh opendistro-for-elasticsearch/alerting)" >> $GITHUB_ENV
      - uses: actions/checkout@v1
        with:
          repository: opendistro-for-elasticsearch/alerting
          ref: ${{env.p_tag_alerting}}
      - name: IT for Alerting
        run: |
          release-tools/scripts/setup_runners_service.sh deb --es
          export PATH=$JAVA_HOME:$PATH; cd $GITHUB_WORKSPACE/../alerting/alerting; pwd
          ../gradlew integTest -Dtests.rest.cluster=localhost:9200 -Dtests.cluster=localhost:9200 -Dtests.clustername=es-integrationtest -Dhttps=true -Duser=admin -Dpassword=admin -Dsecurity=true
        
  Test-AD-KIBANA-NoSec:
    needs: [Provision-Runners]
    runs-on: [self-hosted, Linux, ARM64, odfe-deb-ad-kibana-nosec-arm64]
    name: Test-AD-KIBANA-NoSec
    steps:
      - uses: actions/checkout@v1

      - name: Required Packages
        run: release-tools/scripts/required_packages.sh

      - name: Retrieve plugin tags
        run: |
          echo "es_version_kibana=$(release-tools/scripts/version-info.sh --es)" >> $GITHUB_ENV
          echo "p_tag_ad_kibana=$(release-tools/scripts/plugin_tag.sh opendistro-for-elasticsearch/anomaly-detection-kibana-plugin)" >> $GITHUB_ENV

      - name: Checkout Kibana
        uses: actions/checkout@v2
        with:
          repository: opendistro-for-elasticsearch/kibana-oss
          ref: ${{env.es_version_kibana}}
          token: ${{ secrets.ODFE_RELEASE_BOT_PUBLIC_PRIVATE_READ_WRITE_TOKEN }}
          path: kibana

      - name: Get node and yarn versions
        id: node_yarn_versions
        run: |
          curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.34.0/install.sh | bash
          . ~/.nvm/nvm.sh
          nvm install node
          
          echo "kibana_node_version=$(node -p "(require('./kibana/package.json').engines.node).match(/[.0-9]+/)[0]")" >> $GITHUB_ENV
          echo "kibana_yarn_version=$(node -p "(require('./kibana/package.json').engines.yarn).match(/[.0-9]+/)[0]")" >> $GITHUB_ENV

      - name: Setup node
        uses: actions/setup-node@v1
        with:
          node-version: ${{env.kibana_node_version}}
          registry-url: 'https://registry.npmjs.org'

      - name: Install correct yarn version for Kibana
        run: |
          npm uninstall -g yarn
          echo "Installing yarn ${{ env.kibana_yarn_version }}"
          npm i -g yarn@${{ env.kibana_yarn_version }}

      - name: Checking out ad kibana repo
        uses: actions/checkout@v2
        with:
          repository: opendistro-for-elasticsearch/anomaly-detection-kibana-plugin
          ref: ${{env.p_tag_ad_kibana}}
          path: kibana/plugins/anomaly-detection-kibana-plugin

      - name: Bootstrap the AD kibana plugin
        run: |
          cd ./kibana/plugins/anomaly-detection-kibana-plugin
          yarn kbn bootstrap

      - name: Start ES and Kibana
        run: release-tools/scripts/setup_runners_service.sh deb --kibana-nosec

      - name: run IT
        uses: cypress-io/github-action@v2.5.0
        with:
          working-directory: kibana/plugins/anomaly-detection-kibana-plugin
          command: yarn cy:run --config baseurl=http://localhost:5601

  Test-SQL-KIBANA-NoSec:
    needs: [Provision-Runners]
    runs-on: [self-hosted, Linux, ARM64, odfe-deb-sql-kibana-nosec-arm64]
    name: Test-SQL-KIBANA-NoSec
    steps:
      - uses: actions/checkout@v1
      - name: Set up AWS Cred
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
      - name: Required Packages
        run: release-tools/scripts/required_packages.sh
      - name: Retrieve plugin tags 
        run: |
          echo "p_tag_sql_kibana=$(release-tools/scripts/plugin_tag.sh opendistro-for-elasticsearch/sql)" >> $GITHUB_ENV
          echo "es_version=$(release-tools/scripts/version-info.sh --es)" >> $GITHUB_ENV
          
      - name: Checkout Kibana
        uses: actions/checkout@v2
        with:
          repository: opendistro-for-elasticsearch/kibana-oss
          ref: ${{env.es_version}}
          token: ${{ secrets.ODFE_RELEASE_BOT_PUBLIC_PRIVATE_READ_WRITE_TOKEN }}
          path: kibana
           
      - uses: actions/checkout@v2
        with:
          repository: opendistro-for-elasticsearch/sql
          ref: ${{env.p_tag_sql_kibana}}
          path: kibana/plugins/sql
      
      - name: Get node and yarn versions
        id: node_yarn_versions
        run: |
          curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.34.0/install.sh | bash
          . ~/.nvm/nvm.sh
          nvm install node

          echo "kibana_node_version=$(node -p "(require('./kibana/package.json').engines.node).match(/[.0-9]+/)[0]")" >> $GITHUB_ENV
          echo "kibana_yarn_version=$(node -p "(require('./kibana/package.json').engines.yarn).match(/[.0-9]+/)[0]")" >> $GITHUB_ENV   
      
      - name: Setup node
        uses: actions/setup-node@v1
        with:
          node-version: ${{env.kibana_node_version}}
          registry-url: 'https://registry.npmjs.org'
      
      - name: Install correct yarn version for Kibana
        run: |
          npm uninstall -g yarn
          echo "Installing yarn ${{ env.kibana_yarn_version }}"
          npm i -g yarn@${{ env.kibana_yarn_version }}
      
      - name: Bootstrap the plugin
        run: |
          cd ./kibana/plugins
          cp -rp sql/workbench .
          rm -rf sql/
          cd workbench

      - name: Retry the bootstraps
        # sql repo has a bug that you have to bootstrap at least twice to success
        # this is a temp solution and they will try to fix it later
        uses: nick-invision/retry@v1
        with:
          # 60 min timeouts as certain runners like windows may take 30+ min just to complete one bootstrap
          timeout_minutes: 60
          max_attempts: 3
          command: cd ./kibana/plugins/workbench; pwd; yarn kbn bootstrap

      - name: Start ES and Kibana
        run: |
          release-tools/scripts/setup_runners_service.sh deb --kibana-nosec
          echo "load the indices"
          curl -s https://raw.githubusercontent.com/opendistro-for-elasticsearch/sql/master/integ-test/src/test/resources/accounts.json | curl -s -H 'Content-Type: application/x-ndjson' -XPOST 'localhost:9200/accounts/_bulk?pretty' --data-binary @- > /dev/null 2>&1
          curl -s https://raw.githubusercontent.com/opendistro-for-elasticsearch/sql/master/integ-test/src/test/resources/employee_nested.json | curl -s -H 'Content-Type: application/x-ndjson' -XPOST 'localhost:9200/employee_nested/_bulk?pretty' --data-binary @- > /dev/null 2>&1
 
      - name: run IT
        uses: cypress-io/github-action@v2.5.0
        with:
          working-directory: kibana/plugins/workbench
          command: npx cypress run

  Test-Kibana-Notebooks-NoSec:
    needs: [Provision-Runners]
    runs-on: [self-hosted, Linux, ARM64, odfe-deb-kibana-nb-nosec-arm64]
    name: Test-Kibana-Notebooks-NoSec
    steps:
      - uses: actions/checkout@v1
      - name: Set up AWS Cred
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Install required packages
        run: release-tools/scripts/required_packages.sh

      - name: Retrieve plugin tags 
        run: |
          echo "p_tag_kib_nb=$(release-tools/scripts/plugin_tag.sh opendistro-for-elasticsearch/kibana-notebooks)" >> $GITHUB_ENV
          echo "es_version=$(release-tools/scripts/version-info.sh --es)" >> $GITHUB_ENV
          
      - name: Checkout Kibana
        uses: actions/checkout@v2
        with:
          repository: opendistro-for-elasticsearch/kibana-oss
          ref: ${{env.es_version}}
          token: ${{ secrets.ODFE_RELEASE_BOT_PUBLIC_PRIVATE_READ_WRITE_TOKEN }}
          path: kibana
           
      - uses: actions/checkout@v2
        with:
          repository: opendistro-for-elasticsearch/kibana-notebooks
          ref: ${{env.p_tag_kib_nb}}
          path: kibana/plugins/kibana-notebooks
      
      - name: Get node and yarn versions
        id: node_yarn_versions
        run: |
          curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.34.0/install.sh | bash
          . ~/.nvm/nvm.sh
          nvm install node
          echo "kibana_node_version=$(node -p "(require('./kibana/package.json').engines.node).match(/[.0-9]+/)[0]")" >> $GITHUB_ENV
          echo "kibana_yarn_version=$(node -p "(require('./kibana/package.json').engines.yarn).match(/[.0-9]+/)[0]")" >> $GITHUB_ENV   
      
      - name: Setup node
        uses: actions/setup-node@v1
        with:
          node-version: ${{env.kibana_node_version}}
          registry-url: 'https://registry.npmjs.org'
      
      - name: Install correct yarn version for Kibana
        run: |
          npm uninstall -g yarn
          echo "Installing yarn ${{ env.kibana_yarn_version }}"
          npm i -g yarn@${{ env.kibana_yarn_version }}
      
      - name: Bootstrap the plugin
        run: |
          cd ./kibana/plugins/kibana-notebooks
          yarn kbn bootstrap

      - name: Start ES and Kibana
        run: |
          release-tools/scripts/setup_runners_service.sh deb --kibana-nosec 

      - name: Run IT
        uses: cypress-io/github-action@v2.5.0
        with:
          working-directory: kibana/plugins/kibana-notebooks
          command: npx cypress run

  Test-AD-KIBANA:
    needs: [Provision-Runners]
    runs-on: [self-hosted, Linux, ARM64, odfe-deb-ad-kibana-arm64]
    name: Test-AD-KIBANA
    steps:
      - uses: actions/checkout@v1

      - name: Required Packages
        run: release-tools/scripts/required_packages.sh

      - name: Retrieve plugin tags
        run: |
          echo "es_version_kibana=$(release-tools/scripts/version-info.sh --es)" >> $GITHUB_ENV
          echo "p_tag_ad_kibana=$(release-tools/scripts/plugin_tag.sh opendistro-for-elasticsearch/anomaly-detection-kibana-plugin)" >> $GITHUB_ENV

      - name: Checkout Kibana
        uses: actions/checkout@v2
        with:
          repository: opendistro-for-elasticsearch/kibana-oss
          ref: ${{env.es_version_kibana}}
          token: ${{ secrets.ODFE_RELEASE_BOT_PUBLIC_PRIVATE_READ_WRITE_TOKEN }}
          path: kibana

      - name: Get node and yarn versions
        id: node_yarn_versions
        run: |
          curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.34.0/install.sh | bash
          . ~/.nvm/nvm.sh
          nvm install node
          
          echo "kibana_node_version=$(node -p "(require('./kibana/package.json').engines.node).match(/[.0-9]+/)[0]")" >> $GITHUB_ENV
          echo "kibana_yarn_version=$(node -p "(require('./kibana/package.json').engines.yarn).match(/[.0-9]+/)[0]")" >> $GITHUB_ENV

      - name: Setup node
        uses: actions/setup-node@v1
        with:
          node-version: ${{env.kibana_node_version}}
          registry-url: 'https://registry.npmjs.org'

      - name: Install correct yarn version for Kibana
        run: |
          npm uninstall -g yarn
          echo "Installing yarn ${{ env.kibana_yarn_version }}"
          npm i -g yarn@${{ env.kibana_yarn_version }}

      - name: Checking out ad kibana repo
        uses: actions/checkout@v2
        with:
          repository: opendistro-for-elasticsearch/anomaly-detection-kibana-plugin
          ref: ${{env.p_tag_ad_kibana}}
          path: kibana/plugins/anomaly-detection-kibana-plugin

      - name: Bootstrap the AD kibana plugin
        run: |
          cd ./kibana/plugins/anomaly-detection-kibana-plugin
          yarn kbn bootstrap

      - name: Start ES and Kibana
        run: release-tools/scripts/setup_runners_service.sh deb --kibana

      - name: run IT
        uses: cypress-io/github-action@v2.5.0
        with:
          working-directory: kibana/plugins/anomaly-detection-kibana-plugin
          command: yarn cy:run-with-security --config baseurl=http://localhost:5601
          
  Test-SEC-KIBANA:
    needs: [Provision-Runners]
    runs-on: [self-hosted, Linux, ARM64, odfe-deb-sec-kibana-arm64]
    name: Test-SEC-KIBANA
    steps:
      - uses: actions/checkout@v1

      - name: Required Packages
        run: release-tools/scripts/required_packages.sh

      - name: Retrieve plugin tags 
        run: |
          echo "p_tag_sec_kibana=$(release-tools/scripts/plugin_tag.sh opendistro-for-elasticsearch/security-kibana-plugin)" >> $GITHUB_ENV
          echo "es_version=$(release-tools/scripts/version-info.sh --es)" >> $GITHUB_ENV

      - name: Checkout Kibana
        uses: actions/checkout@v2
        with:
          repository: opendistro-for-elasticsearch/kibana-oss
          ref: ${{env.es_version}}
          token: ${{ secrets.ODFE_RELEASE_BOT_PUBLIC_PRIVATE_READ_WRITE_TOKEN }}
          path: kibana  

      - uses: actions/checkout@v2
        with:
          repository: opendistro-for-elasticsearch/security-kibana-plugin
          ref: ${{env.p_tag_sec_kibana}}
          path: kibana/plugins/opendistro_security

      - name: Get node and yarn versions
        id: node_yarn_versions
        run: |
          curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.34.0/install.sh | bash
          . ~/.nvm/nvm.sh
          nvm install node      

          echo "kibana_node_version=$(node -p "(require('./kibana/package.json').engines.node).match(/[.0-9]+/)[0]")" >> $GITHUB_ENV
          echo "kibana_yarn_version=$(node -p "(require('./kibana/package.json').engines.yarn).match(/[.0-9]+/)[0]")" >> $GITHUB_ENV   
      
      - name: Setup node
        uses: actions/setup-node@v1
        with:
          node-version: ${{env.kibana_node_version}}
          registry-url: 'https://registry.npmjs.org'
      
      - name: Install correct yarn version for Kibana
        run: |
          npm uninstall -g yarn
          echo "Installing yarn ${{ env.kibana_yarn_version }}"
          npm i -g yarn@${{ env.kibana_yarn_version }}
      
      - name: Bootstrap the plugin
        run: |
          cd ./kibana/plugins/opendistro_security
          yarn kbn bootstrap --oss
          
      - name: Start ES and Kibana
        run: release-tools/scripts/setup_runners_service.sh deb --kibana
 
      - name: Run IT
        run: |
          cd ./kibana/plugins/opendistro_security
          yarn test:jest_server

  CleanUp-Runners:
    needs: [Test-IM-NoSec, Test-ALERTING-NoSec, Test-SQL-NoSec, Test-KNN-NoSec, Test-AD-NoSec, Test-SQL, Test-AD, Test-IM, Test-ALERTING, Test-AD-KIBANA-NoSec, Test-SQL-KIBANA-NoSec, Test-AD-KIBANA, Test-SEC-KIBANA, Test-Kibana-Notebooks-NoSec]
    if: always()
    name: CleanUp-Runners
    runs-on: ubuntu-18.04
    steps:
      - uses: actions/checkout@v1
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_EC2_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_EC2_SECRET_ACCESS_KEY }}
          aws-region: us-west-2
      - name: AWS Cli Processing
        run: |
          #!/bin/bash
          # Please add comma at the end of the RUNNERS strings
          # Don't add space after commas
          RUNNERS="odfe-deb-im-nosec-arm64,odfe-deb-alerting-nosec-arm64,odfe-deb-sql-nosec-arm64,odfe-deb-knn-nosec-arm64,odfe-deb-ad-nosec-arm64,"
          RUNNERS+="odfe-deb-sql-arm64,odfe-deb-ad-arm64,odfe-deb-im-arm64,odfe-deb-alerting-arm64,"
          RUNNERS+="odfe-deb-ad-kibana-nosec-arm64,odfe-deb-sql-kibana-nosec-arm64,"
          RUNNERS+="odfe-deb-ad-kibana-arm64,odfe-deb-sec-kibana-arm64,odfe-deb-kibana-nb-nosec-arm64"
          release-tools/scripts/setup_runners.sh terminate $RUNNERS ${{ secrets.ODFE_RELEASE_BOT_PUBLIC_PRIVATE_READ_WRITE_TOKEN }}

