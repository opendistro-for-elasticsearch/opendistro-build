name: Check Plugin Availability Main

on:
  #schedule:
  #  - cron: '0 0,15 * * *'

  repository_dispatch:
    types: [check_plugin]

env:
  CHIME_MESSAGE: "check_plugin pipeline errors"
  PLUGIN_TYPES: ${{ github.event.client_payload.PLUGIN_TYPES_PL }}
  ODFE_VERSION: ${{ github.event.client_payload.ODFE_VERSION_PL }}
  CHIME_ALERT: ${{ github.event.client_payload.CHIME_ALERT_PL }}
  EMAIL_ALERT: ${{ github.event.client_payload.EMAIL_ALERT_PL }}

jobs:
  block-concurrent-runs:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - name: Block Concurrent Runs
        uses: softprops/turnstyle@v1
        with:
          poll-interval-seconds: 20
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  plugin-availability-main:
    name: Check Plugin Availability Main
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v1
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
      - name: Checking Availability
        run: |
          #!/bin/bash
          ES_NO_PLUGINS="8"
          KIBANA_NO_PLUGINS="5"
          CURRENT_DIR=`pwd`
          S3_URL_base="s3://artifacts.opendistroforelasticsearch.amazon.com/downloads"
          S3_URL_zip="${S3_URL_base}/elasticsearch-plugins"
          S3_URL_rpm="${S3_URL_base}/rpms"
          S3_URL_deb="${S3_URL_base}/debs"
          S3_URL_kibana="${S3_URL_base}/kibana-plugins"
          TSCRIPT_NEWLINE="%0D%0A"
          RUN_STATUS=0 # 0 is success, 1 is failure

          # Allow user assignment
          echo "#######################################"
          echo "PLUGIN_TYPES is: $PLUGIN_TYPES"
          if [ -z "$PLUGIN_TYPES" ]
          then
            # Kibana currently have the same plugins for all distros
            PLUGIN_TYPES="zip rpm deb kibana"
            echo "Use default PLUGIN_TYPES: $PLUGIN_TYPES"
          fi
          PLUGIN_TYPES=`echo $PLUGIN_TYPES | tr '[:upper:]' '[:lower:]'`
          echo "#######################################"

          echo "#######################################"
          echo "ODFE_VERSION is: $ODFE_VERSION"
          if [ -z "$ODFE_VERSION" ]
          then
            cd $CURRENT_DIR/elasticsearch/bin
            ls -lrt
            ODFE_VERSION=`./version-info --od`
            ./version-info --od
            echo "Use default ODFE_VERSION: $ODFE_VERSION"
          fi
          echo "#######################################"

          echo "#######################################"
          echo "CHIME_ALERT is: $CHIME_ALERT"
          if [ -z "$CHIME_ALERT" ]
          then
            CHIME_ALERT=true
            echo "Use default CHIME_ALERT: $CHIME_ALERT"
          fi
          echo "#######################################"

          echo "#######################################"
          echo "EMAIL_ALERT is: $EMAIL_ALERT"
          if [ -z "$EMAIL_ALERT" ]
          then
            EMAIL_ALERT=true
            echo "Use default EMAIL_ALERT: $EMAIL_ALERT"
          fi
          echo "#######################################"

          PLUGINS_zip="opendistro-alerting/opendistro_alerting \
                       opendistro-anomaly-detection/opendistro-anomaly-detection \
                       opendistro-index-management/opendistro_index_management \
                       opendistro-job-scheduler/opendistro-job-scheduler \
                       opendistro-knn/opendistro-knn \
                       performance-analyzer/opendistro_performance_analyzer \
                       opendistro-security/opendistro_security \
                       opendistro-sql/opendistro_sql"

          PLUGINS_rpm="opendistro-alerting/opendistro-alerting \
                       opendistro-anomaly-detection/opendistro-anomaly-detection \
                       opendistro-index-management/opendistro-index-management \
                       opendistro-job-scheduler/opendistro-job-scheduler \
                       opendistro-knn/opendistro-knn \
                       opendistro-performance-analyzer/opendistro-performance-analyzer \
                       opendistro-security/opendistro-security \
                       opendistro-sql/opendistro-sql"

          PLUGINS_deb="opendistro-alerting/opendistro-alerting \
                       opendistro-anomaly-detection/opendistro-anomaly-detection \
                       opendistro-index-management/opendistro-index-management \
                       opendistro-job-scheduler/opendistro-job-scheduler \
                       opendistro-knn/opendistro-knn \
                       opendistro-performance-analyzer/opendistro-performance-analyzer \
                       opendistro-security/opendistro-security \
                       opendistro-sql/opendistro-sql"

          PLUGINS_kibana="opendistro-alerting/opendistro-alerting \
                       opendistro-anomaly-detection/opendistro-anomaly-detection-kibana \
                       opendistro-index-management/opendistro_index_management_kibana \
                       opendistro-security/opendistro_security_kibana_plugin \
                       opendistro-sql-workbench/opendistro-sql-workbench"

          # plugin_type
          for plugin_type in $PLUGIN_TYPES
          do
            # Try to dynamically assign the variables based on PLUGIN_TYPES
            eval PLUGINS='$'PLUGINS_${plugin_type}
            eval S3_URL='$'S3_URL_${plugin_type}
            plugin_arr=()
            unavailable_plugin=()
            available_plugin=()
            echo ""
  
            echo "Proceed to check these ES Plugins ($plugin_type):"
            echo "#######################################"
            echo $S3_URL
            echo $PLUGINS | tr " " "\n"
            echo "#######################################"
            cd /home/runner/work/opendistro-build
            rm -rf plugins
            mkdir -p plugins
            echo "#######################################"
            ls -ltr
            cd plugins

            for item in $PLUGINS
            do
              plugin_folder=`echo $item|awk -F/ '{print $1}'`
              plugin_item=`echo $item|awk -F/ '{print $2}'`
              plugin_arr+=( $plugin_item )
              if [ "$plugin_type" = "kibana" ]
              then
                plugin_artifact="${plugin_item}[_-]${ODFE_VERSION}.*zip"
              else
                plugin_artifact="${plugin_item}[_-]${ODFE_VERSION}.*${plugin_type}"
              fi
              aws s3 cp "${S3_URL}/${plugin_folder}/" . --recursive --exclude "*" --include "${plugin_artifact}" --quiet
            done
            echo "#######################################"
            ls -ltr
            echo "#######################################"
            tot_plugins=`ls|wc -l`
            echo $tot_plugins
            echo "${#plugin_arr[*]}"
            
            curr_plugins=`ls`
            echo $curr_plugins
            for plgin in ${plugin_arr[*]}
              do
                if echo $curr_plugins|grep -q $plgin
                then
                    available_plugin+=( $plgin )
                    echo "$plgin exists"
                else
                    unavailable_plugin+=( $plgin )
                fi
              done
  
            cd /home/runner/work/opendistro-build/opendistro-build/
  
              if [ "$plugin_type" = "kibana" ]
              then
                echo "<h1><u>[KIBANA] Plugins ($ODFE_VERSION) Availability Checks for ( $plugin_type $tot_plugins/${#plugin_arr[*]} )</u></h1>" >> message.md
                echo ":bar_chart: [KIBANA] Plugins ($ODFE_VERSION) for ( $plugin_type $tot_plugins/${#plugin_arr[*]} ): $TSCRIPT_NEWLINE" >> chime_message.md
              else
                echo "<h1><u>[ES] Plugins ($ODFE_VERSION) Availability Checks for ( $plugin_type $tot_plugins/${#plugin_arr[*]} )</u></h1>" >> message.md
                echo ":mag_right: [ES] Plugins ($ODFE_VERSION) for ( $plugin_type $tot_plugins/${#plugin_arr[*]} ): $TSCRIPT_NEWLINE" >> chime_message.md
              fi
            
            echo "<h2><p style='color:red;'>Below plugins are <b>NOT available</b> for ODFE-$ODFE_VERSION build:</p></h2>" >> message.md
            if [ "${#unavailable_plugin[*]}" -gt 0 ]
            then
                RUN_STATUS=1
                echo "<ol>" >> message.md
                for item in ${unavailable_plugin[*]}
                do
                  echo "<li><h3>$item</h3></li>" >> message.md
                  echo ":x: $item $TSCRIPT_NEWLINE" >> chime_message.md
                done
                echo "</ol>" >> message.md
                echo "<br><br>" >> message.md
            fi
            
            echo "<h2><p style='color:green;'>Below plugins are <b>available</b> for ODFE-$ODFE_VERSION build:</p></h2>" >> message.md
            if [ "${#available_plugin[*]}" -gt 0 ]
            then
                echo "<ol>" >> message.md
                for item in ${available_plugin[*]}
                do
                  echo "<li><h3>$item</h3></li>" >> message.md
                  echo ":white_check_mark: $item $TSCRIPT_NEWLINE" >> chime_message.md
                done
                echo "</ol>" >> message.md
                echo "<br><br>" >> message.md
            fi
            
            echo "<br><br>" >> message.md
            echo "$TSCRIPT_NEWLINE" >> chime_message.md

          # plugin_type
          done

          echo ::set-env name=CHIME_MESSAGE::$(cat chime_message.md)

          # Use status to decide a success or failure run
          if [ "$RUN_STATUS" -eq 1 ]
          then
            echo ::set-env name=PLUGIN_AVAILABLE::false
          fi

      - name: Send Chime Message
        if: contains(env.CHIME_ALERT, 'true')
        uses: ros-tooling/action-amazon-chime@master
        with:
          message: ${{ env.CHIME_MESSAGE }} 
          webhook: ${{ secrets.CHIME_ODFE_RELEASE }}

      - name: Send mail
        if: contains(env.EMAIL_ALERT, 'true')
        uses: dawidd6/action-send-mail@master
        with:
          server_address: smtp.gmail.com
          server_port: 465
          username: ${{secrets.MAIL_USERNAME}}
          password: ${{secrets.MAIL_PASSWORD}}
          subject: Opendistro for Elasticsearch Build - Daily Run (Plugin Status)
          # Read file contents as body:
          body: file://message.md
          to: sngri@amazon.com,odfe-distribution-build@amazon.com
          from: Opendistro Elasticsearch
          # Optional content type:
          content_type: text/html

      - name: Availability Status Checks
        run: |
          #!/bin/bash
          echo "#######################################"
          if [ "$PLUGIN_AVAILABLE" = "false" ]
          then
            echo "You have one or more plugins not available."
            echo "Exit 1 in the status check step"
            exit 1
          else
            echo "You have all the plugins available."
          fi


