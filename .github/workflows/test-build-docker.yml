name: Build ES Docker

on: 
  #schedule:
  #  - cron: '30 10 * * *'
  repository_dispatch:
    types: [test-build-docker]

jobs:
  build-es-docker:
    strategy:
      matrix:
        java: [14]
    name: Build ES Docker
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v1
       
    - name: Configure AWS
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1

    - name: Set Up JDK ${{ matrix.java }}
      uses: actions/setup-java@v1
      with:
        java-version: ${{ matrix.java }}

    - name: Starting ES Docker Build
      env:
        DOCKER_USER: ${{ secrets.DOCKER_USER }}
        DOCKER_PASS: ${{ secrets.DOCKER_PASS }}
      run: |
        echo "Executing On-demand Build for ES Docker Image"
        ODFE_VER=`./bin/version-info --od`
        echo "ODFE VERSION $ODFE_VER"
        workdir=`pwd`
        sudo apt-get install python-virtualenv
        ./download_plugins.sh
        cd elasticsearch
        security=`ls docker/build/elasticsearch/plugins/|grep opendistro_security|wc -l`
        
        if [ $security -gt 0 ]
        then
           echo "Security plugin is available"
        else
           echo "Security plugin is NOT available"
        fi
        
        cd docker
        make build
        
        echo "******************************"
        echo "Login to Docker"
        echo "******************************"
        docker login --username $DOCKER_USER --password $DOCKER_PASS
        docker images|grep "amazon/opendistro-for-elasticsearch" > docker_id.out
        image_id=`awk -F ' ' '{print $3}' docker_id.out`
        DOCKER_NAME=odfe-test-$ODFE_VER
        echo "Docker Id is $image_id"
        docker tag $image_id opendistroforelasticsearch/opendistroforelasticsearch:$ODFE_VER
        docker images
        docker push opendistroforelasticsearch/opendistroforelasticsearch:$ODFE_VER
        #echo "<h2>The docker image opendistroforelasticsearch/opendistroforelasticsearch:$ODFE_VER for ODFE has been created and uploaded to docker-hub</h2>" >> $workdir/Release.md
        cd ../../..
        ls -ltr
    
    - name: Create Email Message
      run: |
        echo "<h2>On-Demand Opendsitro Docker Image is Ready</h2>" >> Message.md
        echo "<h3>Docker Image: opendistroforelasticsearch/opendistroforelasticsearch:<VERSION-TAG></h3>" >> Message.md
    
    - name: Send Email
      uses: dawidd6/action-send-mail@master
      with:
        server_address: smtp.gmail.com
        server_port: 465
        username: ${{secrets.MAIL_USERNAME}}
        password: ${{secrets.MAIL_PASSWORD}}
        subject: Opendistro for Elasticsearch Build - On-Demand ODFE Image is Ready
        # Read file contents as body:
        body: file://Message.md
        to: odfe-distribution-build@amazon.com
        from: Opendistro Elasticsearch
        # Optional content type:
        content_type: text/html
          
  test-es-plugins-without-security:
    needs: [build-es-docker]
    strategy:
      matrix:
        java: [14]
    name: test-es-plugins-without-security
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v1

    - name: Retrieve plugin tags
      run: |
        echo ::set-env name=p_tag_ism::$(.github/scripts/plugin_tag.sh opendistro-for-elasticsearch/index-management)
        echo ::set-env name=p_tag_alerting::$(.github/scripts/plugin_tag.sh opendistro-for-elasticsearch/alerting)
        echo ::set-env name=p_tag_sql::$(.github/scripts/plugin_tag.sh opendistro-for-elasticsearch/sql)
        echo ::set-env name=p_tag_knn::$(.github/scripts/plugin_tag.sh opendistro-for-elasticsearch/k-NN)
        echo ::set-env name=p_tag_ad::$(.github/scripts/plugin_tag.sh opendistro-for-elasticsearch/anomaly-detection)
        
    - name: Checkout ISM
      uses: actions/checkout@v1
      with:
        repository: opendistro-for-elasticsearch/index-management
        ref: ${{env.p_tag_ism}}

    - name: Checkout Alerting
      uses: actions/checkout@v1
      with:
        repository: opendistro-for-elasticsearch/alerting
        ref: ${{env.p_tag_alerting}}

    - name: Checkout SQL
      uses: actions/checkout@v1
      with:
        repository: opendistro-for-elasticsearch/sql
        ref: ${{env.p_tag_sql}}
        
    - name: Checkout k-NN
      uses: actions/checkout@v1
      with:
        repository: opendistro-for-elasticsearch/k-NN
        ref: ${{env.p_tag_knn}}
  
    - name: Checkout AD
      uses: actions/checkout@v1
      with:
        repository: opendistro-for-elasticsearch/anomaly-detection
        ref: ${{env.p_tag_ad}}
       
    - name: Configure AWS
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1

    - name: Set Up JDK ${{ matrix.java }}
      uses: actions/setup-java@v1
      with:
        java-version: ${{ matrix.java }}

    - name: Start ES Container without Security
      run: |
        ODFE_VER=`./bin/version-info --od`
        echo "ODFE VERSION $ODFE_VER"
        cd ..
        DOCKER_NAME=odfe-test-$ODFE_VER
        echo "Running newly tagged image with no security"
        echo "FROM opendistroforelasticsearch/opendistroforelasticsearch:$ODFE_VER" >> Dockerfile
        echo "RUN /usr/share/elasticsearch/bin/elasticsearch-plugin remove opendistro_security" >> Dockerfile
        echo "RUN echo ''  >> /usr/share/elasticsearch/config/elasticsearch.yml" >> Dockerfile
        echo "RUN echo \"path.repo: [\\\"/usr/share/elasticsearch\\\"]\" >> /usr/share/elasticsearch/config/elasticsearch.yml" >> Dockerfile
        docker build -t odfe-http:no-security .
        sleep 5
 
        docker run -p 9200:9200 -d -p 9600:9600 -e "discovery.type=single-node" --name $DOCKER_NAME odfe-http:no-security
        sleep 30
        curl -XGET http://localhost:9200/_cat/plugins 

    - name: Test ISM Plugin
      if: always()
      run: | 
        cd ../index-management
        ./gradlew integTest -Dtests.rest.cluster=localhost:9200 -Dtests.cluster=localhost:9200 -Dtests.clustername=es-integrationtest

    - name: Test Alerting Plugin
      if: always()
      run: |
        cd ../alerting/alerting
        ../gradlew integTest -Dtests.rest.cluster=localhost:9200 -Dtests.cluster=localhost:9200 -Dtests.clustername=es-integrationtest
        
    - name: Test SQL Plugin
      if: always()
      run: |
        cd ../sql
        ./gradlew integTest -Dtests.rest.cluster=localhost:9200 -Dtests.cluster=localhost:9200 -Dtests.clustername=es-integrationtest
        
    - name: Test k-NN Plugin
      if: always()
      run: |
        cd ../k-NN
        ./gradlew integTest -Dtests.rest.cluster=localhost:9200 -Dtests.cluster=localhost:9200 -Dtests.clustername=es-integrationtest
        
    - name: Test AD Plugin
      if: always()
      run: |
        cd ../anomaly-detection
        ./gradlew :integTestRunner --tests "com.amazon.opendistroforelasticsearch.ad.rest.*IT" --tests "com.amazon.opendistroforelasticsearch.ad.e2e.*IT" -Dtests.rest.cluster=localhost:9200 -Dtests.cluster=localhost:9200 -Dtests.clustername=es-integrationtest
 
  test-es-plugins-with-security:
    needs: [build-es-docker]
    strategy:
      matrix:
        java: [14]
    name: test-es-plugins-with-security
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v1

    - name: Retrieve plugin tags
      run: |
        echo ::set-env name=p_tag_ism::$(.github/scripts/plugin_tag.sh opendistro-for-elasticsearch/index-management)
        echo ::set-env name=p_tag_alerting::$(.github/scripts/plugin_tag.sh opendistro-for-elasticsearch/alerting)
        echo ::set-env name=p_tag_sql::$(.github/scripts/plugin_tag.sh opendistro-for-elasticsearch/sql)
        echo ::set-env name=p_tag_knn::$(.github/scripts/plugin_tag.sh opendistro-for-elasticsearch/k-NN)
        echo ::set-env name=p_tag_ad::$(.github/scripts/plugin_tag.sh opendistro-for-elasticsearch/anomaly-detection)
        
    - name: Checkout ISM
      uses: actions/checkout@v1
      with:
        repository: opendistro-for-elasticsearch/index-management
        ref: ${{env.p_tag_ism}}

    - name: Checkout Alerting
      uses: actions/checkout@v1
      with:
        repository: opendistro-for-elasticsearch/alerting
        ref: ${{env.p_tag_alerting}}

    - name: Checkout SQL
      uses: actions/checkout@v1
      with:
        repository: opendistro-for-elasticsearch/sql
        ref: ${{env.p_tag_sql}}
        
    - name: Checkout k-NN
      uses: actions/checkout@v1
      with:
        repository: opendistro-for-elasticsearch/k-NN
        ref: ${{env.p_tag_knn}}
  
    - name: Checkout AD
      uses: actions/checkout@v1
      with:
        repository: opendistro-for-elasticsearch/anomaly-detection
        ref: ${{env.p_tag_ad}}
       
    - name: Configure AWS
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1

    - name: Set Up JDK ${{ matrix.java }}
      uses: actions/setup-java@v1
      with:
        java-version: ${{ matrix.java }}

    - name: Start ES Container with Security
      run: |
        ODFE_VER=`./bin/version-info --od`
        echo "ODFE VERSION $ODFE_VER"
        cd ..
        DOCKER_NAME=odfe-test-$ODFE_VER
        echo "Running newly tagged image with security"
        echo "FROM opendistroforelasticsearch/opendistroforelasticsearch:$ODFE_VER" >> Dockerfile
        echo "RUN echo ''  >> /usr/share/elasticsearch/config/elasticsearch.yml" >> Dockerfile
        echo "RUN echo \"path.repo: [\\\"/usr/share/elasticsearch\\\"]\" >> /usr/share/elasticsearch/config/elasticsearch.yml" >> Dockerfile
        docker build -t odfe-http:security .
        sleep 5
 
        docker run -p 9200:9200 -d -p 9600:9600 -e "discovery.type=single-node" --name $DOCKER_NAME odfe-http:security
        sleep 30
        curl -XGET https://localhost:9200/_cat/plugins -u admin:admin --insecure
        
        echo "Temp Solution to remove the wrong configuration. need be fixed in building stage" 
        docker exec -t $DOCKER_NAME /bin/bash -c "sed -i /^node.max_local_storage_nodes/d /usr/share/elasticsearch/config/elasticsearch.yml"
        docker restart $DOCKER_NAME
        sleep 30
        curl -XGET https://localhost:9200/_cat/plugins -u admin:admin --insecure
        
    - name: Test SQL Plugin
      if: always()
      run: |
        cd ../sql
        ./gradlew integTest -Dtests.rest.cluster=localhost:9200 -Dtests.cluster=localhost:9200 -Dtests.clustername=es-integrationtest -Dhttps=true -Duser=admin -Dpassword=admin
        
    - name: Test AD Plugin
      if: always()
      run: |
        cd ../anomaly-detection
        ./gradlew :integTestRunner --tests "com.amazon.opendistroforelasticsearch.ad.rest.*IT" --tests "com.amazon.opendistroforelasticsearch.ad.e2e.*IT" -Dtests.rest.cluster=localhost:9200 -Dtests.cluster=localhost:9200 -Dtests.clustername="es-integrationtest" -Dhttps=true -Duser=admin -Dpassword=admin

  build-kibana-docker:
    runs-on: [ubuntu-16.04]
    name: Build Kibana Docker
    steps:
      - uses: actions/checkout@v2
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Build Kibana Docker
        env:
          DOCKER_USER: ${{ secrets.DOCKER_USER }}
          DOCKER_PASS: ${{ secrets.DOCKER_PASS }}
        run: |
          sudo apt-get install python-virtualenv
          ODFE_VER=`./bin/version-info --od`
          echo "ODFE VERSION $ODFE_VER"
          ./download_kibana_plugins.sh
          cd kibana
          cd docker
          make build
          
          echo "******************************"
          echo "Uploading Kibana Docker"
          echo "******************************"
          docker login --username $DOCKER_USER --password $DOCKER_PASS
          docker images|grep "amazon/opendistro-for-elasticsearch-kibana" > kibana_id.out
          kibana_image_id=`awk -F ' ' '{print $3}' kibana_id.out`
          echo "Docker Id is $kibana_image_id"
          docker tag $kibana_image_id opendistroforelasticsearch/opendistroforelasticsearch-kibana:$ODFE_VER
          docker images
          docker push opendistroforelasticsearch/opendistroforelasticsearch-kibana:$ODFE_VER
          
      - name: Create Email Message
        run: |
          echo "<h2>On-Demand Opendsitro Kibana Docker Image is Ready</h2>" >> Message.md
          echo "<h3>Docker Image: opendistroforelasticsearch/opendistroforelasticsearch-kibana:<VERSION-TAG></h3>" >> Message.md
          
      - name: Send Email
        uses: dawidd6/action-send-mail@master
        with:
          server_address: smtp.gmail.com
          server_port: 465
          username: ${{secrets.MAIL_USERNAME}}
          password: ${{secrets.MAIL_PASSWORD}}
          subject: Opendistro for Elasticsearch Build - On-Demand ODFE Kibana Image
          # Read file contents as body:
          body: file://Message.md
          to: odfe-distribution-build@amazon.com
          from: Opendistro Elasticsearch
          # Optional content type:
          content_type: text/html
        
         
