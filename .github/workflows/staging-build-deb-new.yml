name: Process Debian Artifacts

on:
  # schedule:
  #   - cron: '0 10 * * *'
#  repository_dispatch:
#types: [staging-build-deb]
  push:
    branches: [sreekarj_deb]

jobs:
  plugin-availability:
    name: Check Plugin Availability
    runs-on: ubuntu-18.04
    steps:
      - uses: actions/checkout@v1
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_STAGING_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_STAGING_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
      - name: Required Packages
        run: ./release-tools/scripts/required_packages.sh
      - name: Run check_plugin scripts
        run: release-tools/scripts/check_plugin.sh "elasticsearch_deb,kibana_zip"; exit `cat /tmp/plugin_status.check`

  build-es-artifacts:
    needs: [plugin-availability]
    name: Build ES Artifacts
    runs-on: ubuntu-18.04
    container:
      image: opendistroforelasticsearch/multijava08101112-git:v1
    steps:
      - uses: actions/checkout@v1
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_STAGING_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_STAGING_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
      - name: Required Packages
        run: |
          apt-get update
          apt-get install sudo -y
          ./release-tools/scripts/required_packages.sh
      - name: Build deb
        run: |
          #!/bin/bash -x
          set -e
          set -u
          export JAVA_HOME=/openjdk12
          export PATH=$JAVA_HOME:$PATH
          OD_VERSION=`./release-tools/scripts/version-info.sh --od`
          S3_RELEASE_BASEURL=`yq eval '.urls.ODFE.releases' release-tools/scripts/manifest.yml`
          cd elasticsearch/linux_distributions
          apt update -y
          apt install jq python -y
          ./gradlew buildDeb --console=plain -Dbuild.snapshot=false -b ./build.gradle
          ls -ltr build/distributions/*.deb
          deb_artifact=`ls build/distributions/*.deb`
          aws s3 cp $deb_artifact $S3_RELEASE_BASEURL$OD_VERSION/odfe/
          echo "DEB creation for ES completed"

  build-kibana-artifacts:
    needs: [plugin-availability]
    name: Build Kibana Artifacts
    runs-on: [ubuntu-18.04]
    container:
      image: opendistroforelasticsearch/jsenv:v1
    steps:
      - uses: actions/checkout@v1
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_STAGING_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_STAGING_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
      - name: Required Packages
        run: |
          apt-get update
          apt-get install sudo -y
          ./release-tools/scripts/required_packages.sh
      - name: Build Kibana deb
        run: apt install -y jq; ./kibana/linux_distributions/opendistro-kibana-build.sh deb

#  sign-deb-artifacts:
#    needs: [build-es-artifacts, build-kibana-artifacts]
#    runs-on: [ubuntu-18.04]
#    container:
#      image: opendistroforelasticsearch/base-ubuntu
#    steps:
#      - uses: actions/checkout@v1
#
#      - name: Configure AWS Credentials
#        uses: aws-actions/configure-aws-credentials@v1
#        with:
#          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
#          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#          aws-region: us-east-1
#
#      - name: Required Packages
#        run: |
#          apt-get update
#          apt-get install sudo -y
#          ./release-tools/scripts/required_packages.sh
#
#      - name: (NEW) Sign Deb Artifacts
#        env:
#          passphrase: ${{ secrets.PASSPHRASE }}
#        run: ./elasticsearch/linux_distributions/deb-signing.sh $passphrase x64
#
#  Build-ES-and-Kibana-Ubuntu-Docker:
#    needs: [sign-deb-artifacts]
#    runs-on: [ubuntu-18.04]
#    name: Build ubuntu image for Sanity Testing
#    steps:
#      - uses: actions/checkout@v1
#      - name: Checkout Opendistro-Infra
#        uses: actions/checkout@v1
#        with:
#          repository: opendistro-for-elasticsearch/opendistro-infra
#          ref: jenkins-test
#          token: ${{ secrets.ODFE_RELEASE_BOT_PUBLIC_PRIVATE_READ_WRITE_TOKEN }}
#      - name: Build Ubuntu Docker Image
#        env:
#          DOCKER_USER: ${{ secrets.DOCKER_USER }}
#          DOCKER_PASS: ${{ secrets.DOCKER_PASS }}
#        run: |
#          ES_VER=`./bin/version-info --es`
#          ODFE_VER=`./bin/version-info --od`
#          cd elasticsearch/linux_distributions
#          cd ../../..
#          cd opendistro-infra/scripts/dockerfiles/tests/elasticsearch
#          docker build --build-arg VER=$ES_VER -t opendistroforelasticsearch/elasticsearch-test-ubuntu:$ODFE_VER -f opendistro.elasticsearch.test.ubuntu.Dockerfile .
#          
#          cd ../kibana
#          docker build -t opendistroforelasticsearch/kibana-test-ubuntu:$ODFE_VER -f opendistro.kibana.test.ubuntu.Dockerfile .
#          
#          echo "******************************"
#          echo "Login to Docker"
#          echo "******************************"
#          docker login --username $DOCKER_USER --password $DOCKER_PASS
#          
#          docker push opendistroforelasticsearch/elasticsearch-test-ubuntu:$ODFE_VER
#          docker tag opendistroforelasticsearch/elasticsearch-test-ubuntu:$ODFE_VER opendistroforelasticsearch/elasticsearch-test-ubuntu:latest
#          docker push opendistroforelasticsearch/elasticsearch-test-ubuntu:latest
#          sleep 5
#          docker push opendistroforelasticsearch/kibana-test-ubuntu:$ODFE_VER
#          docker tag opendistroforelasticsearch/kibana-test-ubuntu:$ODFE_VER opendistroforelasticsearch/kibana-test-ubuntu:latest
#          docker push opendistroforelasticsearch/kibana-test-ubuntu:latest
#
#          docker logout
#
#      - name: Create Email Message
#        run: |
#          echo "<h2>Docker Images for Ubuntu Are Ready</h2>" >> Message.md
#          echo "<h3> ES Image for Ubuntu Testing: opendistroforelasticsearch/elasticsearch-test-ubuntu:Version-Tag </h3>" >> Message.md
#          echo "<h3> Kibana Image for Ubuntu Testing: opendistroforelasticsearch/kibana-test-ubuntu:Version-Tag </h3>" >> Message.md
#
#      - name: Send Mail
#        uses: dawidd6/action-send-mail@master
#        with:
#          server_address: smtp.gmail.com
#          server_port: 465
#          username: ${{secrets.MAIL_USERNAME}}
#          password: ${{secrets.MAIL_PASSWORD}}
#          subject: Opendistro for Elasticsearch Build - Debian Images For Testing
#          # Read file contents as body:
#          body: file://Message.md
#          to: odfe-distribution-build@amazon.com
#          from: Opendistro Elasticsearch
#          # Optional content type:
#          content_type: text/html

#  Test-ISM-NoSec:
##    needs: [sign-deb-artifacts]
#    runs-on: [ubuntu-18.04]
#    name: Test-ISM-NoSec
#    strategy:
#      fail-fast: false
#      matrix:
#        java: [14]
#    steps:
#      - uses: actions/checkout@v1
#      - name: Required Packages
#        run: ./release-tools/scripts/required_packages.sh
#      - name: Retrieve plugin tags 
#        run:  echo "p_tag_ism=$(release-tools/scripts/plugin_tag.sh opendistro-for-elasticsearch/index-management)" >> $GITHUB_ENV
#
#      - uses: actions/checkout@v1
#        with:
#          repository: opendistro-for-elasticsearch/index-management
#          ref: ${{env.p_tag_ism}}
#      - name: Setup Java
#        uses: actions/setup-java@v1
#        with:
#          java-version: ${{ matrix.java }}
#
#      - name: IT
#        run: |
#          release-tools/scripts/setup_runners_service.sh deb --es-nosec
#          export PATH=$JAVA_HOME:$PATH; cd $GITHUB_WORKSPACE/../index-management; pwd
#          ./gradlew integTest -Dtests.rest.cluster=localhost:9200 -Dtests.cluster=localhost:9200 -Dtests.clustername=es-integrationtest
#          
#
#        
#  Test-AD-KIBANA-NoSec:
##    needs: [sign-deb-artifacts]
#    runs-on: [ubuntu-18.04]
#    name: Test-AD-KIBANA-NoSec
#    strategy:
#      fail-fast: false
#      matrix:
#        java: [14]
#    steps:
#      - uses: actions/checkout@v1
#      - name: Required Packages
#        run: ./release-tools/scripts/required_packages.sh
#      - name: Retrieve plugin tags 
#        run: |
#          echo "####################"
#          ls -ltr 
#          echo "p_tag_ad=$(release-tools/scripts/plugin_tag.sh opendistro-for-elasticsearch/anomaly-detection-kibana-plugin)" >> $GITHUB_ENV
#          echo "es_version=$(release-tools/scripts/version-info.sh --es)" >> $GITHUB_ENV
#          echo $p_tag_ad
#          echo $es_version
#          
#      - name: Checkout Kibana
#        uses: actions/checkout@v2
#        with:
#          repository: opendistro-for-elasticsearch/kibana-oss
#          ref: ${{env.es_version}}
#          token: ${{ secrets.ODFE_RELEASE_BOT_PUBLIC_PRIVATE_READ_WRITE_TOKEN }}
#          path: kibana
#           
#      - uses: actions/checkout@v2
#        with:
#          repository: opendistro-for-elasticsearch/anomaly-detection-kibana-plugin
#          ref: ${{env.p_tag_ad}}
#          path: kibana/plugins/anomaly-detection-kibana-plugin
#      - name: Setup Java
#        uses: actions/setup-java@v1
#        with:
#          java-version: ${{ matrix.java }}
#      
#      - name: Get node and yarn versions
#        id: node_yarn_versions
#        run: |
#          echo "kibana_node_version=$(node -p "(require('./kibana/package.json').engines.node).match(/[.0-9]+/)[0]")" >> $GITHUB_ENV
#          echo "kibana_yarn_version=$(node -p "(require('./kibana/package.json').engines.yarn).match(/[.0-9]+/)[0]")" >> $GITHUB_ENV
#      
#      - name: Setup node
#        uses: actions/setup-node@v1
#        with:
#          node-version: ${{env.kibana_node_version}}
#          registry-url: 'https://registry.npmjs.org'
#      
#      - name: Install correct yarn version for Kibana
#        run: |
#          npm uninstall -g yarn
#          echo "Installing yarn ${{ env.kibana_yarn_version }}"
#          npm i -g yarn@${{ env.kibana_yarn_version }}     
#      
#      - name: Bootstrap the plugin
#        run: |
#          cd ./kibana/plugins/anomaly-detection-kibana-plugin
#          yarn kbn bootstrap
#          
#      - name: Start ES and Kibana
#        run: release-tools/scripts/setup_runners_service.sh deb --kibana-nosec
#          
#      - name: run IT
#        uses: cypress-io/github-action@v2.5.0
#        with:
#          working-directory: kibana/plugins/anomaly-detection-kibana-plugin
#          command: yarn cy:run --config baseurl=http://localhost:5601
#          
