name: Create testing cluster with static domain

# Make sure to pass the distribution type (RPM/DEB/TAR) and security feature (enable, disable) as client_payload in the dispatch event
# Example: client_payload: { "distribution": "rpm", "security": "enable" }
# Example: client_payload: { "distribution": "deb", "security": "disable" }
# NOTE: This workflow is based on the static ELBs pre-configured in the AWS account

on:
  schedule:
    - cron: '30 10 * * *'
  repository_dispatch:
    types: [test-cluster-static-domain-set-up]

jobs:
  Create-Cluster:
    name: Create Testing cluster
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v1

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_STACK_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_STACK_SECRET }}
          aws-region: us-west-2

      - name: Creating cluster with static domain name
        run: |
            #!/bin/bash
            set -e

            distribution_type=`echo ${{github.event.client_payload.distribution}} | tr [:lower:] [:upper:]`
            security=`echo ${{github.event.client_payload.security}} | tr [:lower:] [:upper:]`
            echo $distribution_type $security
            stackName=ODFE-$distribution_type-SECURITY-$security

            existingStacks=`aws cloudformation list-stacks --stack-status-filter CREATE_COMPLETE --query 'StackSummaries[*].StackName' --output text`

            for i in $existingStacks
            do
                if [[ $i = $stackName ]]
                then
                    echo "Stack already exists! Deleting the old stack"
                    aws cloudformation delete-stack --stack-name $stackName
                    aws cloudformation wait stack-delete-complete --stack-name $stackName
                    echo "$stackName deleted successfully!!"
                fi
            done
            
            .github/scripts/userdata.sh "$distribution_type" "$security"
            ls -ltr

            # Getting target groups for ELB mapping
            esTargetGroup=`aws elbv2 describe-target-groups --names ES-$distribution_type-SECURITY-$security --query TargetGroups[*].TargetGroupArn --output text`
            kibanaTargetGroup=`aws elbv2 describe-target-groups --names KIBANA-$distribution_type-SECURITY-$security --query TargetGroups[*].TargetGroupArn --output text`

            echo "Creating $stackName stack"

            aws cloudformation create-stack --stack-name $stackName \
            --template-body file://.github/templates/odfe-testing-cluster-static-domain-template.json \
            --parameters ParameterKey=userdata,ParameterValue=$(base64 -w0 userdata_$distribution_type.sh) \
            ParameterKey=distribution,ParameterValue=$distribution_type \
            ParameterKey=security,ParameterValue=$security \
            ParameterKey=ODFESecurityGroup,ParameterValue=${{secrets.ODFESECURITYGROUP}} \
            ParameterKey=keypair,ParameterValue=${{secrets.AWS_ODFE_TESTING_CLUSTER_KEYPAIR}} \
            ParameterKey=esTargetGroup,ParameterValue=$esTargetGroup \
            ParameterKey=kibanaTargetGroup,ParameterValue=$kibanaTargetGroup

            aws cloudformation wait stack-create-complete --stack-name $stackName
            sleep 60
