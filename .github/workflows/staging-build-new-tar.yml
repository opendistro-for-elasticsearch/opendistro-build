name: Process TAR Artifacts

on:
  # schedule:
  #   - cron: '0 10 * * *'
#  repository_dispatch:
#    types: [staging-build-tar]
  push:
    branches: [sreekarj_tarbuild]
 
jobs:
  plugin-availability:
    name: Check Plugin Availability
    runs-on: ubuntu-18.04
    steps:
      - uses: actions/checkout@v1
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_STAGING_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_STAGING_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
      - name: Required Packages
        run: ./release-tools/scripts/required_packages.sh
      - name: Run check_plugin scripts
        run: .github/scripts/check_plugin.sh "elasticsearch_zip,kibana_zip"; exit `cat /tmp/plugin_status.check`

  build-es-artifacts:
    needs: [plugin-availability]
    name: Build ES Artifacts
    runs-on: ubuntu-18.04
    container:
      image: opendistroforelasticsearch/multijava08101112-git:v1
    steps:
    - uses: actions/checkout@v1
    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_STAGING_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_STAGING_SECRET_ACCESS_KEY }}
        aws-region: us-east-1
    - name: Required Packages
      run: ./release-tools/scripts/required_packages.sh
    - name: Build tar
      run: apt install -y jq unzip; set -u; export JAVA_HOME=/openjdk12; export PATH=$JAVA_HOME:$PATH; ./elasticsearch/linux_distributions/opendistro-tar-build.sh


#  build-kibana-artifacts:
#    needs: [plugin-availability]
#    name: Build Kibana Artifacts
#    runs-on: [ubuntu-18.04]
#    container:
#        image: opendistroforelasticsearch/jsenv:v1
#    steps:
#      - uses: actions/checkout@v1
#      - name: Configure AWS Credentials
#        uses: aws-actions/configure-aws-credentials@v1
#        with:
#          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
#          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#          aws-region: us-east-1
#      - name: Build Kibana
#        run: apt install -y jq; ./kibana/linux_distributions/opendistro-kibana-build.sh tar

#  Test-ISM-NoSec:
#    needs: [build-es-artifacts]
#    runs-on: ubuntu-18.04
#    name: Test-ISM-NoSec
#    strategy:
#      fail-fast: false
#      matrix:
#        java: [14]
#    steps:
#      - name: Set up AWS Cred
#        uses: aws-actions/configure-aws-credentials@v1
#        with:
#          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
#          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#          aws-region: us-east-1
#      - name: Setup Java
#        uses: actions/setup-java@v1
#        with:
#          java-version: ${{ matrix.java }}
#      - uses: actions/checkout@v1
#      - name: Retrieve plugin tags
#        run:  echo "p_tag_ism=$(.github/scripts/plugin_tag.sh opendistro-for-elasticsearch/index-management)" >> $GITHUB_ENV
#      - name: Checkout ISM
#        uses: actions/checkout@v1
#        with:
#          repository: opendistro-for-elasticsearch/index-management
#          ref: ${{env.p_tag_ism}}
#      - name: IT
#        run: |
#          .github/scripts/setup_runners_service.sh zip --es-nosec
#          export PATH=$JAVA_HOME:$PATH; cd $GITHUB_WORKSPACE/../index-management; pwd
#          ./gradlew integTest -Dtests.rest.cluster=localhost:9200 -Dtests.cluster=localhost:9200 -Dtests.clustername=es-integrationtest


#  Test-AD-KIBANA:
#    needs: [build-es-artifacts, build-kibana-artifacts]
#    runs-on: [ubuntu-16.04]
#    name: Test-AD-KIBANA
#    strategy:
#      fail-fast: false
#      matrix:
#        java: [14]
#    steps:
#      - uses: actions/checkout@v1
#      - name: Set up AWS Cred
#        uses: aws-actions/configure-aws-credentials@v1
#        with:
#          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
#          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#          aws-region: us-east-1
#      - name: Retrieve plugin tags 
#        run: |
#          echo "p_tag_ad=$(.github/scripts/plugin_tag.sh opendistro-for-elasticsearch/anomaly-detection-kibana-plugin)" >> $GITHUB_ENV
#          echo "es_version=$(./bin/version-info --es)" >> $GITHUB_ENV
#          
#      - name: Checkout Kibana
#        uses: actions/checkout@v2
#        with:
#          repository: opendistro-for-elasticsearch/kibana-oss
#          ref: ${{env.es_version}}
#          token: ${{ secrets.ODFE_RELEASE_BOT_PUBLIC_PRIVATE_READ_WRITE_TOKEN }}
#          path: kibana
           
#      - uses: actions/checkout@v2
#        with:
#          repository: opendistro-for-elasticsearch/anomaly-detection-kibana-plugin
#          ref: ${{env.p_tag_ad}}
#          path: kibana/plugins/anomaly-detection-kibana-plugin
      
#      - name: Setup Java
#        uses: actions/setup-java@v1
#        with:
#          java-version: ${{ matrix.java }}
      
#      - name: Get node and yarn versions
#        id: node_yarn_versions
#        run: |
#          echo "kibana_node_version=$(node -p "(require('./kibana/package.json').engines.node).match(/[.0-9]+/)[0]")" >> $GITHUB_ENV
#          echo "kibana_yarn_version=$(node -p "(require('./kibana/package.json').engines.yarn).match(/[.0-9]+/)[0]")" >> $GITHUB_ENV   
      
#      - name: Setup node
#        uses: actions/setup-node@v1
#        with:
#          node-version: ${{env.kibana_node_version}}
#          registry-url: 'https://registry.npmjs.org'
      
#      - name: Install correct yarn version for Kibana
#        run: |
#          npm uninstall -g yarn
#          echo "Installing yarn ${{ env.kibana_yarn_version }}"
#          npm i -g yarn@${{ env.kibana_yarn_version }}
#      
#      - name: Bootstrap the plugin
#        run: |
#          cd ./kibana/plugins/anomaly-detection-kibana-plugin
#          yarn kbn bootstrap
#          
#      - name: Start ES and Kibana
#        run: .github/scripts/setup_runners_service.sh zip --kibana
 
#      - name: run IT
#        uses: cypress-io/github-action@v2.5.0
#        with:
#          working-directory: kibana/plugins/anomaly-detection-kibana-plugin
#          command: yarn cy:run-with-security --config baseurl=http://localhost:5601

